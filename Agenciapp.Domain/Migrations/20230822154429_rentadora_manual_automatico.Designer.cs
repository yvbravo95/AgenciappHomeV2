// <auto-generated />
using System;
using AgenciappHome.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Agenciapp.Domain.Migrations
{
    [DbContext(typeof(databaseContext))]
    [Migration("20230822154429_rentadora_manual_automatico")]
    partial class rentadora_manual_automatico
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Agenciapp.Domain.Models.AccessGuiaAereaAgency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyId");

                    b.Property<Guid?>("GuiaAereaId");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("GuiaAereaId");

                    b.ToTable("AccessGuiaAereaAgencies");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ApiPassport.IncompletePassport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateAt");

                    b.Property<string>("Data");

                    b.Property<int>("ServicioConsular");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IncompletePassport");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ApiPassportSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<string>("AgencyInfo");

                    b.Property<string>("ApiLoginId");

                    b.Property<decimal>("CreditCardFee");

                    b.Property<string>("Description");

                    b.Property<Guid>("EmployeeId");

                    b.Property<decimal>("ServiceCost");

                    b.Property<string>("Stripe_SecretKey");

                    b.Property<bool>("TestMerchant");

                    b.Property<string>("Token");

                    b.Property<string>("TransactionKey");

                    b.Property<string>("UrlCallback");

                    b.Property<Guid?>("WholesalerId");

                    b.Property<string>("ZelleEmail");

                    b.HasKey("Id");

                    b.ToTable("ApiPassportSetting");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FileType");

                    b.Property<string>("Name");

                    b.Property<string>("OriginalName");

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.ToTable("Attachments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Attachment");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.BuildEmail.EmailAttached", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("EmailBodyId");

                    b.Property<string>("Name");

                    b.Property<string>("OriginalName");

                    b.HasKey("Id");

                    b.HasIndex("EmailBodyId");

                    b.ToTable("EmailAttacheds");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.BuildEmail.EmailBody", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<Guid?>("EmailTemplateId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.HasKey("Id");

                    b.HasIndex("EmailTemplateId");

                    b.ToTable("EmailBodies");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.BuildEmail.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<string>("Name");

                    b.Property<string>("Template");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.BuildEmail.RegistrationSendEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClientId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<Guid?>("EmailBodyId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmailBodyId");

                    b.ToTable("RegistrationSendEmails");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.Cheque", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<Guid?>("ManifiestoPasaporteId");

                    b.Property<string>("Number");

                    b.Property<int>("ServicioConsular");

                    b.HasKey("Id");

                    b.HasIndex("ManifiestoPasaporteId");

                    b.ToTable("Cheques");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Cheque");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ConnectionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("IpdAddress");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ConnectionLogs");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ContainerGuiaCubiq", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("GuiaAereaId");

                    b.Property<string>("Number");

                    b.Property<DateTime>("UpdateAt");

                    b.HasKey("Id");

                    b.HasIndex("GuiaAereaId");

                    b.ToTable("ContainerGuiaCubiq");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.CostoTraslado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyId");

                    b.Property<decimal>("Cost");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("CostoTraslados");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.Country", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.DBViewModels.OrdersByProvince", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Estado");

                    b.Property<Guid>("PrincipalDistributorId");

                    b.HasKey("OrderId");

                    b.ToTable("OrdersByProvince");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.DBViewModels.OrdersReceivedByAgency", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgencyName");

                    b.Property<string>("AgencyTransferredName");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Estado");

                    b.Property<Guid>("PrincipalDistributorId");

                    b.HasKey("OrderId");

                    b.ToTable("OrdersReceivedByAgency");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Type");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.HMpaquetesPriceByProvince", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid>("MunicipalityId");

                    b.Property<decimal>("Price");

                    b.Property<Guid>("ProvinceId");

                    b.Property<Guid>("RetailAgencyId");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RetailAgencyId");

                    b.ToTable("HMpaquetesPriceByProvinces");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.InvoiceNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyId");

                    b.Property<decimal>("Amount");

                    b.Property<Guid?>("ClientId");

                    b.Property<decimal>("Cost");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<Guid?>("EmployeeUserId");

                    b.Property<Guid?>("EnvioCaribeId");

                    b.Property<Guid?>("EnvioMaritimoId");

                    b.Property<string>("NoteNumber");

                    b.Property<Guid?>("OrderCubiqId");

                    b.Property<DateTime>("OrderDate");

                    b.Property<Guid?>("OrderId");

                    b.Property<Guid?>("PassportId");

                    b.Property<decimal>("PreviousAmount");

                    b.Property<decimal>("PreviousCost");

                    b.Property<Guid?>("RechargueId");

                    b.Property<Guid?>("RemittanceId");

                    b.Property<string>("ServiceNumber");

                    b.Property<int>("ServiceType");

                    b.Property<Guid?>("ServicioId");

                    b.Property<Guid?>("TicketId");

                    b.Property<int>("Type");

                    b.Property<Guid?>("WholesalerIdWholesaler");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeUserId");

                    b.HasIndex("EnvioCaribeId");

                    b.HasIndex("EnvioMaritimoId");

                    b.HasIndex("OrderCubiqId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PassportId");

                    b.HasIndex("RechargueId");

                    b.HasIndex("RemittanceId");

                    b.HasIndex("ServicioId");

                    b.HasIndex("TicketId");

                    b.HasIndex("WholesalerIdWholesaler");

                    b.ToTable("InvoiceNotes");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.MinorAuthorization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressCountry");

                    b.Property<string>("AddressMunicipality");

                    b.Property<string>("AddressProvince");

                    b.Property<string>("AddressStreet");

                    b.Property<string>("ChildAddressCountry");

                    b.Property<string>("ChildAddressMunicipality");

                    b.Property<string>("ChildAddressProvince");

                    b.Property<string>("ChildAddressStreet");

                    b.Property<string>("ChildCountryOfBirth");

                    b.Property<string>("ChildFullName");

                    b.Property<string>("ChildIdentityNumber");

                    b.Property<string>("ChildMunicipalityOfBirth");

                    b.Property<string>("ChildPassportNumber");

                    b.Property<string>("ChildProvinceOfBirth");

                    b.Property<string>("CountryOfBirth");

                    b.Property<string>("DocumentCity");

                    b.Property<string>("DocumentCounty");

                    b.Property<string>("DocumentState");

                    b.Property<string>("FullName");

                    b.Property<int?>("MaritalStatus");

                    b.Property<int?>("MigratoryStatus");

                    b.Property<string>("MunicipalityOfBirth");

                    b.Property<string>("Notary");

                    b.Property<string>("Ocuppation");

                    b.Property<string>("PassportNumber");

                    b.Property<string>("ProvinceOfBirth");

                    b.HasKey("Id");

                    b.ToTable("MinorAuthorizationOrders");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.Note", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClientId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("CreatedByUserUserId");

                    b.Property<string>("Value");

                    b.HasKey("id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedByUserUserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.Notification.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<Guid?>("EmployeeUserId");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.PromoCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyId");

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("CreatedByUserId");

                    b.Property<DateTime>("DateEnd");

                    b.Property<DateTime>("DateInit");

                    b.Property<int>("OrderType");

                    b.Property<int>("PromoType");

                    b.Property<decimal>("Value");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.RegistroCobro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("DateCobro");

                    b.Property<Guid>("Mayorista");

                    b.Property<Guid?>("MinoristaAgency");

                    b.Property<Guid?>("MinoristaClient");

                    b.Property<decimal>("OldValue");

                    b.Property<string>("OrderNumber");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.ToTable("RegistroCobro");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ReporteCobro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyId");

                    b.Property<decimal>("Charged");

                    b.Property<decimal>("ChargedDiferido");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<decimal>("InitialValue");

                    b.Property<decimal>("Reajuste");

                    b.Property<decimal>("SaldoReal");

                    b.Property<decimal>("SalesDay");

                    b.Property<decimal>("Total");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("ReporteCobros");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyId");

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.SqlViews.ReporteLiquidacion", b =>
                {
                    b.Property<Guid>("RegistroPagoId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid?>("BillId");

                    b.Property<decimal?>("Caribe_Amount");

                    b.Property<DateTime?>("Caribe_Date");

                    b.Property<string>("Caribe_Number");

                    b.Property<decimal?>("Caribe_Pagado");

                    b.Property<string>("Caribe_Status");

                    b.Property<Guid?>("ClientId");

                    b.Property<bool?>("ClientIsCarrier");

                    b.Property<decimal?>("Cubiq_Amount");

                    b.Property<DateTime?>("Cubiq_Date");

                    b.Property<string>("Cubiq_Number");

                    b.Property<decimal?>("Cubiq_Pagado");

                    b.Property<string>("Cubiq_Status");

                    b.Property<Guid?>("CuentaBancariaId");

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("EnvioCaribeId");

                    b.Property<Guid?>("EnvioMaritimoId");

                    b.Property<Guid?>("FacturaId");

                    b.Property<decimal?>("Maritimo_Amount");

                    b.Property<DateTime?>("Maritimo_Date");

                    b.Property<string>("Maritimo_Number");

                    b.Property<decimal?>("Maritimo_Pagado");

                    b.Property<string>("Maritimo_Status");

                    b.Property<Guid?>("MercadoId");

                    b.Property<Guid?>("OrderCubiqId");

                    b.Property<Guid?>("OrderId");

                    b.Property<decimal?>("Order_Amount");

                    b.Property<decimal?>("Order_CantLb");

                    b.Property<decimal?>("Order_CantLbMedicina");

                    b.Property<DateTime?>("Order_Date");

                    b.Property<Guid?>("Order_MinoristaId");

                    b.Property<string>("Order_Number");

                    b.Property<decimal?>("Order_Pagado");

                    b.Property<string>("Order_Status");

                    b.Property<string>("Order_Type");

                    b.Property<Guid?>("PaqueteTuristicoId");

                    b.Property<decimal?>("PaqueteTuristico_Amount");

                    b.Property<DateTime?>("PaqueteTuristico_Date");

                    b.Property<string>("PaqueteTuristico_Number");

                    b.Property<decimal?>("PaqueteTuristico_Pagado");

                    b.Property<string>("PaqueteTuristico_Status");

                    b.Property<Guid?>("PassportId");

                    b.Property<decimal?>("Passport_Amount");

                    b.Property<DateTime?>("Passport_Date");

                    b.Property<string>("Passport_Number");

                    b.Property<decimal?>("Passport_Pagado");

                    b.Property<string>("Passport_Status");

                    b.Property<DateTime?>("Recarga_Date");

                    b.Property<decimal?>("Recarga_Import");

                    b.Property<string>("Recarga_Number");

                    b.Property<decimal?>("Recarga_Pagado");

                    b.Property<string>("Recarga_Status");

                    b.Property<Guid?>("RechargueId");

                    b.Property<decimal?>("Remesa_Amount");

                    b.Property<DateTime?>("Remesa_Date");

                    b.Property<string>("Remesa_Number");

                    b.Property<decimal?>("Remesa_Pagado");

                    b.Property<string>("Remesa_Status");

                    b.Property<Guid?>("RemittanceId");

                    b.Property<Guid?>("ServicioId");

                    b.Property<decimal?>("Servicio_Amount");

                    b.Property<DateTime?>("Servicio_Date");

                    b.Property<string>("Servicio_Number");

                    b.Property<decimal?>("Servicio_Pagado");

                    b.Property<Guid?>("Servicio_PaqueteTuristicoId");

                    b.Property<string>("Servicio_Status");

                    b.Property<Guid?>("TicketId");

                    b.Property<decimal?>("Ticket_Amount");

                    b.Property<DateTime?>("Ticket_Date");

                    b.Property<string>("Ticket_Number");

                    b.Property<decimal?>("Ticket_Pagado");

                    b.Property<Guid?>("Ticket_PaqueteTuristicoId");

                    b.Property<string>("Ticket_Status");

                    b.Property<Guid?>("TipoServicioId");

                    b.Property<string>("TipoServicio_Nombre");

                    b.Property<string>("Type");

                    b.Property<Guid>("UserId");

                    b.Property<string>("User_LastName");

                    b.Property<string>("User_Name");

                    b.Property<Guid>("tipoPagoId");

                    b.Property<decimal>("valorPagado");

                    b.HasKey("RegistroPagoId");

                    b.ToTable("ReporteLiquidacion");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.StoredProduct", b =>
                {
                    b.Property<string>("BarcodeNumber")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BarcodeFormats");

                    b.Property<string>("Brand");

                    b.Property<string>("Category");

                    b.Property<string>("Color");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsTranslated");

                    b.Property<string>("Model");

                    b.Property<string>("Mpn");

                    b.Property<string>("Title");

                    b.Property<string>("Title_es");

                    b.Property<Guid?>("UserId");

                    b.Property<string>("Weight");

                    b.HasKey("BarcodeNumber");

                    b.HasIndex("UserId");

                    b.ToTable("StoredProducts");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyId");

                    b.Property<string>("subject");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.Task_", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClientId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("DueDate");

                    b.Property<Guid?>("EmployeeUserId");

                    b.Property<string>("Nota");

                    b.Property<string>("Number");

                    b.Property<int>("Priority");

                    b.Property<int>("Status");

                    b.Property<string>("Subject");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeUserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.TaskLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Info");

                    b.Property<Guid?>("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskLogs");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.UserDistributor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DistributorId");

                    b.Property<Guid?>("EmployeeId");

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("UserDistributors");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ValueObject.EmailAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("EmailAddress");
                });

            modelBuilder.Entity("AgenciappHome.Models.AccessList", b =>
                {
                    b.Property<Guid>("AccessListId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("Controller");

                    b.HasKey("AccessListId");

                    b.ToTable("AccessLists");
                });

            modelBuilder.Entity("AgenciappHome.Models.AccessListUser", b =>
                {
                    b.Property<Guid>("AccessListUserId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccessListId");

                    b.Property<Guid>("UserId");

                    b.HasKey("AccessListUserId");

                    b.HasIndex("AccessListId");

                    b.HasIndex("UserId");

                    b.ToTable("AccessListUsers");
                });

            modelBuilder.Entity("AgenciappHome.Models.Address", b =>
                {
                    b.Property<Guid>("AddressId");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(250);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(250);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("Current");

                    b.Property<Guid>("ReferenceId");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UpdatedBy");

                    b.Property<string>("Zip")
                        .HasMaxLength(50);

                    b.Property<string>("countryiso2");

                    b.HasKey("AddressId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Address");
                });

            modelBuilder.Entity("AgenciappHome.Models.Aduana", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Articulo");

                    b.Property<string>("Cantidad");

                    b.Property<bool>("EnvioAduana");

                    b.Property<string>("Observaciones");

                    b.Property<string>("UM");

                    b.Property<string>("Valor");

                    b.HasKey("Id");

                    b.ToTable("Aduana");
                });

            modelBuilder.Entity("AgenciappHome.Models.Agency", b =>
                {
                    b.Property<Guid>("AgencyId");

                    b.Property<string>("AgencyInfo");

                    b.Property<string>("AgencyNumber");

                    b.Property<string>("BagCount");

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("EmailAddressId");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PassApiWholesaler");

                    b.Property<Guid?>("PhoneId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UrlCalbackApiReyenvios");

                    b.Property<string>("UserApiWholesaler");

                    b.Property<decimal>("creditCardFee");

                    b.Property<decimal>("creditCardFee_Combos");

                    b.Property<decimal>("creditCardFee_Pasaje");

                    b.Property<string>("logoName");

                    b.Property<decimal>("precioFoto");

                    b.Property<decimal>("remesa_entregaCuba");

                    b.HasKey("AgencyId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EmailAddressId");

                    b.HasIndex("PhoneId");

                    b.ToTable("Agency");
                });

            modelBuilder.Entity("AgenciappHome.Models.AgencyContact", b =>
                {
                    b.Property<Guid>("AgencyContactId");

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid>("ContactId");

                    b.HasKey("AgencyContactId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("AgencyContact");
                });

            modelBuilder.Entity("AgenciappHome.Models.AgencyPrecioRefMinorista", b =>
                {
                    b.Property<Guid>("AgencyPrecioRefMinoristaId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid>("PrecioRefMinoristaId");

                    b.HasKey("AgencyPrecioRefMinoristaId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("PrecioRefMinoristaId");

                    b.ToTable("AgencyPrecioRefMinoristas");
                });

            modelBuilder.Entity("AgenciappHome.Models.Airline", b =>
                {
                    b.Property<Guid>("AirlineId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("AirlineId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Airline");
                });

            modelBuilder.Entity("AgenciappHome.Models.AirlineFlights", b =>
                {
                    b.Property<Guid>("AirlineFlightsId");

                    b.Property<Guid>("AirlineId");

                    b.Property<Guid>("FlightsId");

                    b.HasKey("AirlineFlightsId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("AirlineFlights");
                });

            modelBuilder.Entity("AgenciappHome.Models.ApiModel.FcmToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Token");

                    b.Property<int>("TokenType");

                    b.Property<Guid?>("UserClientId");

                    b.HasKey("Id");

                    b.HasIndex("UserClientId");

                    b.ToTable("FcmTokens");
                });

            modelBuilder.Entity("AgenciappHome.Models.ApiModel.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<decimal>("Charges");

                    b.Property<Guid>("ContactId");

                    b.Property<string>("CreditCardLastFour");

                    b.Property<DateTime>("DateTime");

                    b.Property<Guid?>("DiscountId");

                    b.Property<string>("Number");

                    b.Property<int>("PaymentType");

                    b.Property<string>("Status");

                    b.Property<decimal>("TotalPrice");

                    b.Property<string>("TransactionId");

                    b.Property<Guid?>("UserClientId");

                    b.Property<string>("ZelleNumber");

                    b.HasKey("InvoiceId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UserClientId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("AgenciappHome.Models.ApiModel.InvoiceProductoBodega", b =>
                {
                    b.Property<Guid>("InvoiceId");

                    b.Property<Guid>("ProductoBodegaId");

                    b.Property<decimal>("Amount");

                    b.HasKey("InvoiceId", "ProductoBodegaId");

                    b.HasIndex("ProductoBodegaId");

                    b.ToTable("InvoiceProductoBodegas");
                });

            modelBuilder.Entity("AgenciappHome.Models.ApiModel.UserClient", b =>
                {
                    b.Property<Guid>("UserClientId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<int>("AppType");

                    b.Property<Guid?>("ClientId");

                    b.Property<DateTime?>("ExpiresSecureCode");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<bool>("PhoneConfirmed");

                    b.Property<string>("SecureCode");

                    b.Property<string>("Status");

                    b.Property<string>("Stripe_CustomerId");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("Username");

                    b.Property<string>("newPhone");

                    b.HasKey("UserClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("UserClients");
                });

            modelBuilder.Entity("AgenciappHome.Models.AttachmentTicket", b =>
                {
                    b.Property<Guid>("IdDocument")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<Guid>("TicketForeignKey");

                    b.Property<Guid?>("TicketId");

                    b.Property<string>("type");

                    b.HasKey("IdDocument");

                    b.HasIndex("TicketId");

                    b.ToTable("AttachmentTicket");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AttachmentTicket");
                });

            modelBuilder.Entity("AgenciappHome.Models.AuthorizationCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CCV");

                    b.Property<string>("CardCreditEnding");

                    b.Property<string>("ConvCharge");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("ExpDate");

                    b.Property<string>("OwnerAddressDiferent");

                    b.Property<string>("TotalCharge");

                    b.Property<string>("addressOfSend");

                    b.Property<string>("email");

                    b.Property<string>("phone");

                    b.Property<string>("saleAmount");

                    b.Property<string>("typeCard");

                    b.HasKey("Id");

                    b.ToTable("AuthorizationCards");
                });

            modelBuilder.Entity("AgenciappHome.Models.Auxiliar.RecBancariaAgency", b =>
                {
                    b.Property<Guid>("RecBancariaAgencyId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdTramite");

                    b.Property<Guid>("cashAccountingBoxItemId");

                    b.Property<string>("cliente");

                    b.Property<DateTime>("date");

                    b.Property<string>("details");

                    b.Property<decimal>("monto");

                    b.Property<string>("number");

                    b.Property<string>("tipopago");

                    b.HasKey("RecBancariaAgencyId");

                    b.HasIndex("cashAccountingBoxItemId");

                    b.ToTable("RecBancariaAgencies");
                });

            modelBuilder.Entity("AgenciappHome.Models.AuxReserva", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Categoria");

                    b.Property<string>("Modelo");

                    b.Property<decimal>("Precio1");

                    b.Property<decimal>("Precio2");

                    b.Property<decimal>("Precio3");

                    b.Property<decimal>("Precio4");

                    b.Property<Guid?>("RentadoraId");

                    b.Property<int>("Temporada");

                    b.Property<int>("Transmision");

                    b.HasKey("Id");

                    b.HasIndex("RentadoraId");

                    b.ToTable("AuxReservas");
                });

            modelBuilder.Entity("AgenciappHome.Models.Bag", b =>
                {
                    b.Property<Guid>("BagId");

                    b.Property<string>("CheckedNote");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<Guid?>("OrderId");

                    b.Property<int>("PhysicalBags");

                    b.HasKey("BagId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("Bag");
                });

            modelBuilder.Entity("AgenciappHome.Models.BagItem", b =>
                {
                    b.Property<Guid>("BagItemId");

                    b.Property<Guid>("BagId");

                    b.Property<int>("Order");

                    b.Property<Guid>("ProductId");

                    b.Property<int>("Qty");

                    b.Property<int>("QtyReceived");

                    b.HasKey("BagItemId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("BagId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("BagItem");
                });

            modelBuilder.Entity("AgenciappHome.Models.Bill", b =>
                {
                    b.Property<Guid>("BillId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<bool>("IsPaymentProductShipping");

                    b.Property<bool>("IsSendPdf");

                    b.Property<string>("NoBill");

                    b.Property<DateTime>("atransferir");

                    b.Property<string>("estado");

                    b.Property<DateTime>("fecha");

                    b.Property<decimal>("otrospagos");

                    b.Property<string>("otrospagosdetalles");

                    b.Property<decimal>("refunds");

                    b.Property<string>("refundsdetalles");

                    b.Property<string>("tipopago");

                    b.Property<decimal>("valorPagado");

                    b.HasKey("BillId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("AgenciappHome.Models.Bodega", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdOffice");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid?>("OfficeId");

                    b.Property<Guid>("idAgency");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Bodegas");
                });

            modelBuilder.Entity("AgenciappHome.Models.BodegaProducto", b =>
                {
                    b.Property<Guid>("IdBodegaProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdBodega_Producto");

                    b.Property<Guid?>("BodegaId");

                    b.Property<decimal>("Cantidad")
                        .HasColumnName("Cantidad")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid>("IdBodega");

                    b.Property<Guid>("IdProducto");

                    b.Property<decimal>("Monto")
                        .HasColumnName("Monto")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("IdBodegaProducto");

                    b.HasIndex("BodegaId");

                    b.HasIndex("IdProducto");

                    b.ToTable("BodegaProductos");
                });

            modelBuilder.Entity("AgenciappHome.Models.BoxHistory", b =>
                {
                    b.Property<Guid>("BoxHistoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CashBoxId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<decimal>("Monto");

                    b.Property<string>("Type");

                    b.HasKey("BoxHistoryId");

                    b.HasIndex("CashBoxId");

                    b.ToTable("BoxHistories");
                });

            modelBuilder.Entity("AgenciappHome.Models.CardRemittance", b =>
                {
                    b.Property<Guid>("CardRemittanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NotaTarjeta");

                    b.Property<string>("RecipientAddressCountry");

                    b.Property<string>("RecipientCardNumber");

                    b.Property<string>("RecipientCardType");

                    b.Property<string>("RecipientCity");

                    b.Property<string>("RecipientName");

                    b.Property<string>("RecipientNumberCI");

                    b.Property<string>("RecipientPhone");

                    b.Property<string>("RecipientProvince");

                    b.Property<string>("RecipientSecondSurname");

                    b.Property<string>("RecipientSurname");

                    b.Property<string>("SenderAddressEEUU");

                    b.Property<decimal>("SenderAmountRechargueCard");

                    b.Property<string>("SenderCountryBirth");

                    b.Property<DateTime>("SenderDateBirth");

                    b.Property<string>("SenderDocumentType");

                    b.Property<DateTime>("SenderExpirationDateDocument");

                    b.Property<string>("SenderName");

                    b.Property<string>("SenderNumberIdentityDocument");

                    b.Property<string>("SenderPhoneEEUU");

                    b.Property<string>("SenderSecondSurName");

                    b.Property<string>("SenderSurName");

                    b.HasKey("CardRemittanceId");

                    b.ToTable("CardRemittances");
                });

            modelBuilder.Entity("AgenciappHome.Models.Carrier", b =>
                {
                    b.Property<Guid>("CarrierId");

                    b.Property<Guid?>("AddressId");

                    b.Property<Guid>("AgencyId")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ClientId");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("CarrierId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AddressId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.ToTable("Carrier");
                });

            modelBuilder.Entity("AgenciappHome.Models.CashAccountingBoxItem", b =>
                {
                    b.Property<Guid>("CashAccountingBoxItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid?>("CashBoxId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEnd");

                    b.Property<DateTime>("DateInit");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("CashAccountingBoxItemId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CashBoxId");

                    b.ToTable("CashAccountingBoxItems");
                });

            modelBuilder.Entity("AgenciappHome.Models.CashAdjustment", b =>
                {
                    b.Property<Guid>("CashAdjustmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("Description");

                    b.Property<string>("TypeAdjustment");

                    b.Property<Guid?>("cashAccountingBoxItemId");

                    b.HasKey("CashAdjustmentId");

                    b.HasIndex("cashAccountingBoxItemId");

                    b.ToTable("CashAdjustments");
                });

            modelBuilder.Entity("AgenciappHome.Models.CashBox", b =>
                {
                    b.Property<Guid>("CashBoxId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Name");

                    b.HasKey("CashBoxId");

                    b.HasIndex("AgencyId");

                    b.ToTable("CashBoxes");
                });

            modelBuilder.Entity("AgenciappHome.Models.CategoriaBodega", b =>
                {
                    b.Property<Guid>("IdCategoria")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IdCategoria");

                    b.ToTable("CategoriaBodegas");
                });

            modelBuilder.Entity("AgenciappHome.Models.Category", b =>
                {
                    b.Property<Guid>("IdCategory")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("category");

                    b.HasKey("IdCategory");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("AgenciappHome.Models.Ciudad", b =>
                {
                    b.Property<Guid>("CiudadId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EstadoId");

                    b.Property<string>("Name");

                    b.HasKey("CiudadId");

                    b.HasIndex("EstadoId");

                    b.ToTable("Ciudades");
                });

            modelBuilder.Entity("AgenciappHome.Models.Client", b =>
                {
                    b.Property<Guid>("ClientId");

                    b.Property<Guid?>("AddressId");

                    b.Property<Guid>("AgencyId");

                    b.Property<string>("ClientNumber")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Conflictivo");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<DateTime>("FechaNac");

                    b.Property<string>("ID");

                    b.Property<bool>("IsCarrier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastName2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name2");

                    b.Property<string>("Nota");

                    b.Property<Guid?>("PhoneId");

                    b.Property<bool>("checkNotifications");

                    b.Property<bool>("createByTicketCode");

                    b.Property<string>("phoneCuba");

                    b.HasKey("ClientId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AddressId");

                    b.HasIndex("PhoneId");

                    b.HasIndex("AgencyId", "ClientId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("AgenciappHome.Models.ClientContact", b =>
                {
                    b.Property<Guid>("CCId");

                    b.Property<Guid>("ClientId");

                    b.Property<Guid>("ContactId");

                    b.HasKey("CCId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClientId");

                    b.HasIndex("ContactId");

                    b.ToTable("ClientContact");
                });

            modelBuilder.Entity("AgenciappHome.Models.Config", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Email_Pass")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Email_Port")
                        .HasMaxLength(100);

                    b.Property<string>("Email_Server")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Email_User")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Config");
                });

            modelBuilder.Entity("AgenciappHome.Models.Configuracion", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Key");

                    b.ToTable("Configuracion");
                });

            modelBuilder.Entity("AgenciappHome.Models.Contact", b =>
                {
                    b.Property<Guid>("ContactId");

                    b.Property<Guid?>("AddressId");

                    b.Property<string>("CI");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid?>("Phone1PhoneId");

                    b.Property<Guid?>("Phone2PhoneId");

                    b.HasKey("ContactId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AddressId");

                    b.HasIndex("Phone1PhoneId");

                    b.HasIndex("Phone2PhoneId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("AgenciappHome.Models.CostByProvince", b =>
                {
                    b.Property<Guid>("CostByProvinceId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Cost");

                    b.Property<Guid>("ProvinciaId");

                    b.Property<int>("Type");

                    b.Property<Guid>("WholesalerId");

                    b.HasKey("CostByProvinceId");

                    b.HasIndex("ProvinciaId");

                    b.HasIndex("WholesalerId");

                    b.ToTable("CostByProvinces");
                });

            modelBuilder.Entity("AgenciappHome.Models.CostoCubiq", b =>
                {
                    b.Property<Guid>("CostoCubiqId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Value");

                    b.Property<decimal>("Value2");

                    b.Property<Guid?>("ZonaId");

                    b.HasKey("CostoCubiqId");

                    b.HasIndex("ZonaId");

                    b.ToTable("CostosCubiq");
                });

            modelBuilder.Entity("AgenciappHome.Models.CostosxModulo", b =>
                {
                    b.Property<Guid>("CostosxModuloId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("CostosxModuloId");

                    b.ToTable("CostosxModulo");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CostosxModulo");
                });

            modelBuilder.Entity("AgenciappHome.Models.Cotizador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid>("ClientId");

                    b.Property<DateTime>("CreateAt");

                    b.Property<string>("Json");

                    b.Property<string>("Number");

                    b.Property<string>("Tipo");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Cotizador");
                });

            modelBuilder.Entity("AgenciappHome.Models.Credit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Referencia");

                    b.Property<decimal>("value");

                    b.HasKey("Id");

                    b.ToTable("Credits");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Credit");
                });

            modelBuilder.Entity("AgenciappHome.Models.Credito", b =>
                {
                    b.Property<Guid>("CreditoId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<string>("Referencia");

                    b.Property<decimal>("value");

                    b.HasKey("CreditoId");

                    b.HasIndex("ClientId");

                    b.ToTable("Credito");
                });

            modelBuilder.Entity("AgenciappHome.Models.Cuenta", b =>
                {
                    b.Property<Guid>("IdCuenta")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Ciudad")
                        .HasMaxLength(50);

                    b.Property<string>("Comuna")
                        .HasMaxLength(50);

                    b.Property<string>("Direccion")
                        .HasMaxLength(250);

                    b.Property<string>("Fono")
                        .HasMaxLength(30);

                    b.Property<Guid>("IdTipoCuenta")
                        .HasColumnName("IdTipo_Cuenta");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("IdCuenta");

                    b.HasIndex("IdTipoCuenta");

                    b.ToTable("Cuentas");
                });

            modelBuilder.Entity("AgenciappHome.Models.CuentaBancaria", b =>
                {
                    b.Property<Guid>("CuentaBancariaId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<string>("NoCuenta");

                    b.HasKey("CuentaBancariaId");

                    b.HasIndex("AgencyId");

                    b.ToTable("CuentaBancarias");
                });

            modelBuilder.Entity("AgenciappHome.Models.DocumentPassenger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country");

                    b.Property<DateTime>("ExpDate");

                    b.Property<string>("Number");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("AgenciappHome.Models.EnvioCaribe", b =>
                {
                    b.Property<Guid>("EnvioCaribeId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid?>("AgencyTransferidaId");

                    b.Property<decimal>("Amount");

                    b.Property<Guid?>("AuthorizationCardId");

                    b.Property<DateTime?>("CanceledDate");

                    b.Property<Guid>("ClientId");

                    b.Property<Guid>("ContactId");

                    b.Property<decimal>("Credito");

                    b.Property<DateTime>("Date");

                    b.Property<string>("NoDespacho");

                    b.Property<string>("Nota");

                    b.Property<string>("NotaDespacho");

                    b.Property<string>("Number")
                        .IsRequired();

                    b.Property<Guid>("OfficeId");

                    b.Property<decimal>("OtrosCostos");

                    b.Property<decimal>("Precio");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<Guid>("UserId");

                    b.Property<decimal>("ValorPagado");

                    b.Property<Guid?>("WholesalerId");

                    b.Property<decimal>("addPrecio");

                    b.Property<decimal>("costo");

                    b.Property<Guid?>("firmaClienteId");

                    b.Property<bool>("isComboAseoAlim");

                    b.Property<string>("modalidadEnvio")
                        .IsRequired();

                    b.Property<string>("numero")
                        .IsRequired();

                    b.Property<string>("servicio")
                        .IsRequired();

                    b.HasKey("EnvioCaribeId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("AgencyTransferidaId");

                    b.HasIndex("AuthorizationCardId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContactId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId");

                    b.HasIndex("WholesalerId");

                    b.HasIndex("firmaClienteId");

                    b.ToTable("EnvioCaribes");
                });

            modelBuilder.Entity("AgenciappHome.Models.EnvioCaribeValorAduanal", b =>
                {
                    b.Property<Guid>("EnvioCaribeValorAduanalId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EnvioCaribeId");

                    b.Property<Guid>("ValorAduanalId");

                    b.HasKey("EnvioCaribeValorAduanalId");

                    b.HasIndex("EnvioCaribeId");

                    b.HasIndex("ValorAduanalId");

                    b.ToTable("EnvioCaribeValorAduanal");
                });

            modelBuilder.Entity("AgenciappHome.Models.EnvioMaritimo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AddCosto");

                    b.Property<decimal>("AddPrecio");

                    b.Property<Guid>("AgencyId");

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("Balance");

                    b.Property<DateTime?>("CanceledDate");

                    b.Property<decimal>("CantLb");

                    b.Property<decimal>("CantLbDuradero");

                    b.Property<int>("CantPqt");

                    b.Property<Guid?>("ClientId");

                    b.Property<Guid>("ContactId");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("EnablePriceLbDuradero");

                    b.Property<Guid>("IdAuthorizationCard");

                    b.Property<string>("Nota");

                    b.Property<string>("Number")
                        .IsRequired();

                    b.Property<Guid>("OfficeId");

                    b.Property<decimal>("OtrosCostos");

                    b.Property<decimal>("PriceLb")
                        .HasColumnType("decimal(18,9)");

                    b.Property<decimal>("PriceLbDuradero");

                    b.Property<decimal>("ProductsShipping");

                    b.Property<string>("Referencia");

                    b.Property<string>("Status");

                    b.Property<Guid>("TipoPagoId");

                    b.Property<Guid>("UserId");

                    b.Property<decimal>("ValorAduanal");

                    b.Property<decimal>("ValorPagado");

                    b.Property<Guid?>("agenciaId");

                    b.Property<Guid?>("authorizationCardId");

                    b.Property<decimal>("cargoAdicional");

                    b.Property<decimal>("costoDespacho");

                    b.Property<decimal>("costoMayorista");

                    b.Property<Guid?>("despachadaAIdWholesaler");

                    b.Property<DateTime>("fechadespacho");

                    b.Property<Guid?>("firmaClienteId");

                    b.Property<string>("numeroDespacho");

                    b.Property<string>("referCargoAdicional");

                    b.Property<Guid?>("wholesalerIdWholesaler");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContactId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("OfficeId");

                    b.HasIndex("TipoPagoId");

                    b.HasIndex("UserId");

                    b.HasIndex("agenciaId");

                    b.HasIndex("authorizationCardId");

                    b.HasIndex("despachadaAIdWholesaler");

                    b.HasIndex("firmaClienteId");

                    b.HasIndex("wholesalerIdWholesaler");

                    b.ToTable("EnvioMaritimo");
                });

            modelBuilder.Entity("AgenciappHome.Models.Estado", b =>
                {
                    b.Property<Guid>("EstadoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abb");

                    b.Property<string>("Name");

                    b.HasKey("EstadoId");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("AgenciappHome.Models.EstadoMovimiento", b =>
                {
                    b.Property<Guid>("IdEstadoMovimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdEstado_Movimiento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IdEstadoMovimiento");

                    b.ToTable("Estados_Movimiento");
                });

            modelBuilder.Entity("AgenciappHome.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid>("ClientId");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Title");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("AgenciappHome.Models.Factura", b =>
                {
                    b.Property<Guid>("FacturaId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsSendPdf");

                    b.Property<string>("NoFactura");

                    b.Property<Guid>("agencyId");

                    b.Property<DateTime>("atransferir");

                    b.Property<string>("conceptoafacturar");

                    b.Property<string>("estado");

                    b.Property<DateTime>("fecha");

                    b.Property<decimal>("otrospagos");

                    b.Property<string>("otrospagosdetalles");

                    b.Property<decimal>("pagado");

                    b.Property<decimal>("refunds");

                    b.Property<string>("refundsdetalles");

                    b.Property<string>("tipopago");

                    b.Property<decimal>("valorPagado");

                    b.Property<decimal>("valorTotal");

                    b.HasKey("FacturaId");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("AgenciappHome.Models.Flights", b =>
                {
                    b.Property<Guid>("FlightsId");

                    b.Property<string>("CityIn")
                        .IsRequired();

                    b.Property<string>("CityOut")
                        .IsRequired();

                    b.HasKey("FlightsId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("AgenciappHome.Models.formBuilder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Identifier");

                    b.Property<Guid?>("OfficeId");

                    b.Property<string>("data");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("formBuilder");
                });

            modelBuilder.Entity("AgenciappHome.Models.GenerateXml", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Oreder");

                    b.Property<string>("RealName");

                    b.Property<int>("Tipo");

                    b.HasKey("Id");

                    b.ToTable("GenerateXml");
                });

            modelBuilder.Entity("AgenciappHome.Models.GenerateXmlAux", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Categoria");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("Provcode");

                    b.Property<int>("Tipo");

                    b.HasKey("Id");

                    b.ToTable("GenerateXmlAux");
                });

            modelBuilder.Entity("AgenciappHome.Models.GuiaAerea", b =>
                {
                    b.Property<Guid>("GuiaAereaId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyId");

                    b.Property<string>("Agente");

                    b.Property<int>("Bultos");

                    b.Property<decimal>("CostAv1");

                    b.Property<decimal>("CostAv2");

                    b.Property<decimal>("CostAv3");

                    b.Property<decimal>("CostAv4");

                    b.Property<int>("CountPackage");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("EnableHandlingAndTransportation");

                    b.Property<DateTime>("FechaVuelo");

                    b.Property<string>("NoGuia");

                    b.Property<string>("NoVuelo");

                    b.Property<decimal>("PesoKg");

                    b.Property<decimal>("PriceAv1");

                    b.Property<decimal>("PriceAv2");

                    b.Property<decimal>("PriceAv3");

                    b.Property<decimal>("PriceAv4");

                    b.Property<string>("Status");

                    b.Property<string>("Type");

                    b.HasKey("GuiaAereaId");

                    b.HasIndex("AgencyId");

                    b.ToTable("GuiaAerea");
                });

            modelBuilder.Entity("AgenciappHome.Models.GuiaPasaporte", b =>
                {
                    b.Property<Guid>("GuiaId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyId");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("FechaEnvio");

                    b.Property<string>("NoGuia");

                    b.Property<string>("Status");

                    b.Property<Guid?>("UserId");

                    b.Property<int>("codservagencia");

                    b.HasKey("GuiaId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("UserId");

                    b.ToTable("GuiasPasaporte");
                });

            modelBuilder.Entity("AgenciappHome.Models.Habitaciones", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cantidad");

                    b.Property<Guid?>("TicketId");

                    b.Property<string>("TipoId");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("TipoId");

                    b.ToTable("Habitaciones");
                });

            modelBuilder.Entity("AgenciappHome.Models.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<bool>("Cancelado");

                    b.Property<int>("CantDias");

                    b.Property<decimal>("Costo");

                    b.Property<string>("Desc");

                    b.Property<Guid>("MayoristaId");

                    b.Property<string>("Nombre");

                    b.Property<decimal>("Precio");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("MayoristaId");

                    b.ToTable("Hoteles");
                });

            modelBuilder.Entity("AgenciappHome.Models.ImageClient", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClientId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("type");

                    b.Property<byte[]>("value");

                    b.HasKey("ID");

                    b.HasIndex("ClientId");

                    b.ToTable("ImageClient");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ImageClient");
                });

            modelBuilder.Entity("AgenciappHome.Models.ImagenPromotion", b =>
                {
                    b.Property<Guid>("ImagenPromotionId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.HasKey("ImagenPromotionId");

                    b.HasIndex("AgencyId");

                    b.ToTable("ImagenPromotion");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ImagenPromotion");
                });

            modelBuilder.Entity("AgenciappHome.Models.Log", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid?>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("EnvioCaribeId");

                    b.Property<Guid?>("EnvioMaritimoId");

                    b.Property<string>("Event")
                        .IsRequired();

                    b.Property<Guid?>("InvoiceId");

                    b.Property<string>("Message");

                    b.Property<Guid?>("OrderCubicOrderCubiqId");

                    b.Property<Guid?>("OrderId");

                    b.Property<string>("Pagado");

                    b.Property<Guid?>("PaqueteTuristicoPaqueteId");

                    b.Property<Guid?>("PassportId");

                    b.Property<string>("Precio");

                    b.Property<Guid?>("RechargueId");

                    b.Property<Guid?>("RemittanceId");

                    b.Property<Guid?>("ReservaTicketId");

                    b.Property<Guid?>("ServicioId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<Guid?>("UserId");

                    b.HasKey("LogId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EnvioCaribeId");

                    b.HasIndex("EnvioMaritimoId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("OrderCubicOrderCubiqId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaqueteTuristicoPaqueteId");

                    b.HasIndex("PassportId");

                    b.HasIndex("RechargueId");

                    b.HasIndex("RemittanceId");

                    b.HasIndex("ReservaTicketId");

                    b.HasIndex("ServicioId");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("AgenciappHome.Models.ManifiestoPasaporte", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("GuiaPasaporteGuiaId");

                    b.Property<int>("Numero");

                    b.HasKey("Id");

                    b.HasIndex("GuiaPasaporteGuiaId");

                    b.ToTable("ManifiestosPasaporte");
                });

            modelBuilder.Entity("AgenciappHome.Models.Mercado", b =>
                {
                    b.Property<Guid>("MercadoId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<decimal>("Amount");

                    b.Property<Guid?>("AuthorizationCardId");

                    b.Property<decimal>("Balance");

                    b.Property<decimal>("Cargos");

                    b.Property<Guid>("ClientId");

                    b.Property<decimal>("Credito");

                    b.Property<DateTime>("Date");

                    b.Property<decimal>("Descuento");

                    b.Property<decimal>("Fee");

                    b.Property<string>("Number");

                    b.Property<Guid>("OfficeId");

                    b.Property<Guid?>("OrderRevisadaId");

                    b.Property<decimal>("Precio");

                    b.Property<string>("Status");

                    b.Property<Guid?>("UserId");

                    b.Property<decimal>("ValorPagado");

                    b.HasKey("MercadoId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("AuthorizationCardId");

                    b.HasIndex("ClientId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("OrderRevisadaId");

                    b.HasIndex("UserId");

                    b.ToTable("Mercado");
                });

            modelBuilder.Entity("AgenciappHome.Models.Minorista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Minoristas");
                });

            modelBuilder.Entity("AgenciappHome.Models.MinoristaOtrosServ", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("MinoristaOtrosServs");
                });

            modelBuilder.Entity("AgenciappHome.Models.MinoristaPasaporte", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<string>("Codigo");

                    b.Property<string>("Nombre");

                    b.Property<decimal>("Pricio1");

                    b.Property<decimal>("Pricio2");

                    b.Property<decimal>("Pricio3");

                    b.Property<decimal>("Pricio4");

                    b.Property<decimal>("Pricio5");

                    b.Property<decimal>("PricioP1Exp");

                    b.Property<decimal>("PricioP2Exp");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("MinoristaPasaportes");
                });

            modelBuilder.Entity("AgenciappHome.Models.ModuloAsignado", b =>
                {
                    b.Property<Guid>("ModuloAsignadoId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Hidden");

                    b.Property<Guid>("IdWholesaler");

                    b.Property<string>("Tramite");

                    b.Property<Guid?>("costoxModuloCostosxModuloId");

                    b.HasKey("ModuloAsignadoId");

                    b.HasIndex("costoxModuloCostosxModuloId");

                    b.ToTable("ModuloAsignados");
                });

            modelBuilder.Entity("AgenciappHome.Models.Movimiento", b =>
                {
                    b.Property<Guid>("IdMovimiento")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdAgency");

                    b.Property<Guid?>("IdBodegaDestino")
                        .HasColumnName("IdBodega_Destino");

                    b.Property<Guid?>("IdBodegaOrigen")
                        .HasColumnName("IdBodega_Origen");

                    b.Property<Guid?>("IdEstadoMovimiento")
                        .HasColumnName("IdEstado_Movimiento");

                    b.Property<Guid?>("IdProveedor");

                    b.Property<Guid?>("IdTipoDocumento")
                        .HasColumnName("IdTipo_Documento");

                    b.Property<Guid>("IdTipoMovimiento")
                        .HasColumnName("IdTipo_Movimiento");

                    b.Property<string>("MonedaOriginal")
                        .HasColumnName("Moneda_Original")
                        .HasMaxLength(50);

                    b.Property<string>("NoDocumento")
                        .HasColumnName("No_Documento")
                        .HasMaxLength(30);

                    b.Property<string>("Observacion")
                        .HasMaxLength(250);

                    b.Property<Guid?>("ProveedorIdWholesaler");

                    b.Property<string>("UnidadMedidaOriginal")
                        .HasColumnName("Unidad_Medida_Original")
                        .HasMaxLength(50);

                    b.HasKey("IdMovimiento");

                    b.HasIndex("IdBodegaDestino");

                    b.HasIndex("IdBodegaOrigen");

                    b.HasIndex("IdEstadoMovimiento");

                    b.HasIndex("IdTipoDocumento");

                    b.HasIndex("IdTipoMovimiento");

                    b.HasIndex("ProveedorIdWholesaler");

                    b.ToTable("Movimientos");
                });

            modelBuilder.Entity("AgenciappHome.Models.MovimientoProducto", b =>
                {
                    b.Property<Guid>("IdMovimientoProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdMovimiento_Producto");

                    b.Property<decimal>("Cantidad")
                        .HasColumnName("Cantidad")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("IdAgency");

                    b.Property<Guid>("IdMovimiento");

                    b.Property<Guid>("IdProducto");

                    b.Property<decimal>("Precio")
                        .HasColumnName("Precio")
                        .HasColumnType("decimal(11, 2)");

                    b.HasKey("IdMovimientoProducto");

                    b.HasIndex("IdMovimiento");

                    b.HasIndex("IdProducto");

                    b.ToTable("Movimientos_Productos");
                });

            modelBuilder.Entity("AgenciappHome.Models.Municipio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ZonaCubiq");

                    b.Property<string>("nombreMunicipio");

                    b.Property<Guid?>("provinciaId");

                    b.HasKey("Id");

                    b.HasIndex("provinciaId");

                    b.ToTable("Municipio");
                });

            modelBuilder.Entity("AgenciappHome.Models.NotificationByAgency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<bool>("AirShippment");

                    b.Property<bool>("Combo");

                    b.Property<bool>("Reclamo");

                    b.Property<bool>("Reservation");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("NotificationByAgencies");
                });

            modelBuilder.Entity("AgenciappHome.Models.Office", b =>
                {
                    b.Property<Guid>("OfficeId");

                    b.Property<Guid>("AgencyId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("OfficeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AgencyId");

                    b.ToTable("Office");
                });

            modelBuilder.Entity("AgenciappHome.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId");

                    b.Property<decimal>("AditionalCharge");

                    b.Property<Guid>("AgencyId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("CanceledDate");

                    b.Property<decimal>("CantLb")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("CantLbMedicina");

                    b.Property<Guid>("ClientId");

                    b.Property<Guid>("ContactId");

                    b.Property<decimal>("CustomsTax");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Delivery");

                    b.Property<Guid?>("DiscountId");

                    b.Property<DateTime?>("DistributedDate");

                    b.Property<Guid?>("DistributorId");

                    b.Property<decimal>("FeeService");

                    b.Property<string>("FileNameAttachment");

                    b.Property<Guid>("IdAuthorizationCard");

                    b.Property<Guid>("IdShipping");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<bool>("IsCreatedMovileApp");

                    b.Property<bool>("LackReview");

                    b.Property<bool>("LackSend");

                    b.Property<Guid?>("MinoristaId");

                    b.Property<string>("NoOrden");

                    b.Property<string>("NoTarjeta");

                    b.Property<string>("Nota");

                    b.Property<string>("NotaTarjeta");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NumberWholesaler");

                    b.Property<string>("NumeroDespachoDistribuidor");

                    b.Property<Guid>("OfficeId");

                    b.Property<Guid?>("OfficeTransferidaOfficeId");

                    b.Property<decimal>("OtrosCostos")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("PriceLb")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("PriceLbMedicina");

                    b.Property<Guid?>("PrincipalDistributorId");

                    b.Property<decimal>("ProductsShipping");

                    b.Property<DateTime?>("ReceivedDate");

                    b.Property<Guid?>("RepartidorId");

                    b.Property<DateTime?>("ShippingDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("TipoPagoId");

                    b.Property<decimal>("TotalPagado");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<Guid>("UserId");

                    b.Property<decimal>("ValorAduanal")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("ValorPagado")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("addCosto");

                    b.Property<decimal>("addPrecio");

                    b.Property<Guid?>("agencyTransferidaAgencyId");

                    b.Property<Guid?>("authorizationCardId");

                    b.Property<int>("cantidad");

                    b.Property<decimal>("costoDeProveedor");

                    b.Property<decimal>("costoMayorista");

                    b.Property<decimal>("costoProductosBodega");

                    b.Property<decimal>("costoporDespacho");

                    b.Property<decimal>("credito");

                    b.Property<Guid?>("despachadaAIdWholesaler");

                    b.Property<bool>("express");

                    b.Property<DateTime>("fechaEntrega");

                    b.Property<DateTime>("fechadespacho");

                    b.Property<decimal>("feeCobro");

                    b.Property<bool>("isUsd");

                    b.Property<bool>("iswebapi");

                    b.Property<string>("numerodespacho");

                    b.Property<Guid?>("orderEntregadaId");

                    b.Property<Guid?>("orderRevisadaId");

                    b.Property<string>("order_key");

                    b.Property<decimal>("pagoMayorista");

                    b.Property<Guid?>("shippingPackingId");

                    b.Property<string>("tarifa");

                    b.Property<Guid?>("wholesalerIdWholesaler");

                    b.HasKey("OrderId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AgencyId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContactId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("DistributorId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("MinoristaId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("OfficeTransferidaOfficeId");

                    b.HasIndex("PrincipalDistributorId");

                    b.HasIndex("RepartidorId");

                    b.HasIndex("TipoPagoId");

                    b.HasIndex("UserId");

                    b.HasIndex("agencyTransferidaAgencyId");

                    b.HasIndex("authorizationCardId");

                    b.HasIndex("despachadaAIdWholesaler");

                    b.HasIndex("orderEntregadaId");

                    b.HasIndex("orderRevisadaId");

                    b.HasIndex("shippingPackingId");

                    b.HasIndex("wholesalerIdWholesaler");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("AgenciappHome.Models.OrderCubiq", b =>
                {
                    b.Property<Guid>("OrderCubiqId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AWB");

                    b.Property<Guid>("AgencyId");

                    b.Property<decimal>("Amount");

                    b.Property<Guid?>("AuthorizationCardId");

                    b.Property<decimal>("Balance");

                    b.Property<DateTime?>("CanceledDate");

                    b.Property<Guid>("ClientId");

                    b.Property<Guid>("ContactId");

                    b.Property<Guid?>("ContainerId");

                    b.Property<decimal>("Costo");

                    b.Property<DateTime>("Date");

                    b.Property<decimal>("Descuento");

                    b.Property<bool>("IsAv");

                    b.Property<string>("Nota");

                    b.Property<string>("Number");

                    b.Property<Guid>("OfficeId");

                    b.Property<decimal>("OtrosCostos");

                    b.Property<decimal>("Price");

                    b.Property<Guid?>("PuntoEntregaId");

                    b.Property<string>("Stamp");

                    b.Property<string>("Status");

                    b.Property<Guid>("UserId");

                    b.Property<decimal>("ValorAduanal");

                    b.Property<decimal>("ValorPagado");

                    b.Property<Guid?>("ZonaId");

                    b.Property<Guid?>("agencyTransferidaId");

                    b.Property<decimal>("costoMayorista");

                    b.Property<decimal>("credito");

                    b.Property<bool>("express");

                    b.Property<Guid?>("orderEntregadaId");

                    b.Property<Guid?>("orderRevisadaId");

                    b.Property<Guid?>("wholesalerIdWholesaler");

                    b.HasKey("OrderCubiqId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("AuthorizationCardId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContactId");

                    b.HasIndex("ContainerId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PuntoEntregaId");

                    b.HasIndex("UserId");

                    b.HasIndex("ZonaId");

                    b.HasIndex("agencyTransferidaId");

                    b.HasIndex("orderEntregadaId");

                    b.HasIndex("orderRevisadaId");

                    b.HasIndex("wholesalerIdWholesaler");

                    b.ToTable("OrderCubiqs");
                });

            modelBuilder.Entity("AgenciappHome.Models.OrderRevisada", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsIncomplete");

                    b.Property<string>("firmaname");

                    b.Property<string>("imagename");

                    b.HasKey("Id");

                    b.ToTable("OrderRevisadas");
                });

            modelBuilder.Entity("AgenciappHome.Models.Package", b =>
                {
                    b.Property<Guid>("PackageId");

                    b.HasKey("PackageId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Package");
                });

            modelBuilder.Entity("AgenciappHome.Models.PackageItem", b =>
                {
                    b.Property<Guid>("PackageItemId");

                    b.Property<string>("Description");

                    b.Property<Guid>("PackageId");

                    b.Property<Guid>("ProductId");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("Supplier")
                        .HasMaxLength(50);

                    b.HasKey("PackageItemId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PackageId");

                    b.HasIndex("ProductId");

                    b.ToTable("PackageItem");
                });

            modelBuilder.Entity("AgenciappHome.Models.Pago", b =>
                {
                    b.Property<Guid>("PagoId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Number");

                    b.Property<Guid>("OfficeId");

                    b.Property<Guid>("OrderId");

                    b.Property<Guid>("TipoPagoId");

                    b.Property<Guid>("UserId");

                    b.Property<decimal>("ValorPagado");

                    b.Property<string>("nota");

                    b.HasKey("PagoId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ClientId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TipoPagoId");

                    b.HasIndex("UserId");

                    b.ToTable("Pago");
                });

            modelBuilder.Entity("AgenciappHome.Models.PagoEnvioMaritimo", b =>
                {
                    b.Property<Guid>("PagoId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid?>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Number");

                    b.Property<Guid>("OfficeId");

                    b.Property<Guid>("TipoPagoId");

                    b.Property<Guid>("UserId");

                    b.Property<decimal>("ValorPagado");

                    b.Property<Guid?>("envioId");

                    b.HasKey("PagoId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ClientId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("TipoPagoId");

                    b.HasIndex("UserId");

                    b.HasIndex("envioId");

                    b.ToTable("PagoEnvioMaritimos");
                });

            modelBuilder.Entity("AgenciappHome.Models.Pais", b =>
                {
                    b.Property<Guid>("PaisId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo");

                    b.Property<string>("Nacinalidad");

                    b.Property<string>("Nombre");

                    b.Property<int>("Orden");

                    b.HasKey("PaisId");

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("AgenciappHome.Models.Paquete", b =>
                {
                    b.Property<Guid>("PaqueteId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Alto");

                    b.Property<decimal>("Ancho");

                    b.Property<decimal>("Costo");

                    b.Property<decimal>("CostoCubiq");

                    b.Property<string>("Descripcion");

                    b.Property<Guid?>("GuiaAereaId");

                    b.Property<decimal>("Largo");

                    b.Property<string>("Numero");

                    b.Property<Guid>("OrderCubiqId");

                    b.Property<decimal>("PesoKg");

                    b.Property<decimal>("PesoLb");

                    b.Property<decimal>("Precio");

                    b.Property<string>("Status");

                    b.Property<int>("Type");

                    b.HasKey("PaqueteId");

                    b.HasIndex("GuiaAereaId");

                    b.HasIndex("Numero")
                        .IsUnique()
                        .HasFilter("[Numero] IS NOT NULL");

                    b.HasIndex("OrderCubiqId");

                    b.ToTable("Paquete");
                });

            modelBuilder.Entity("AgenciappHome.Models.PaqueteEnvCaribe", b =>
                {
                    b.Property<Guid>("PaqueteEnvCaribeId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EnvioCaribeId");

                    b.Property<string>("descripcion");

                    b.Property<string>("numero");

                    b.Property<decimal>("peso");

                    b.Property<decimal>("tarifa");

                    b.Property<string>("tipo_producto");

                    b.HasKey("PaqueteEnvCaribeId");

                    b.HasIndex("EnvioCaribeId");

                    b.ToTable("PaqueteEnvCaribes");
                });

            modelBuilder.Entity("AgenciappHome.Models.PaqueteTuristico", b =>
                {
                    b.Property<Guid>("PaqueteId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<decimal>("Amount");

                    b.Property<DateTime?>("CanceledDate");

                    b.Property<Guid?>("ClientId");

                    b.Property<decimal>("Costo");

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("FirmaClienteId");

                    b.Property<string>("Nota");

                    b.Property<string>("Number");

                    b.Property<decimal>("OtrosCostos");

                    b.Property<decimal>("Precio");

                    b.Property<string>("Status");

                    b.Property<Guid>("UserId");

                    b.Property<decimal>("ValorPagado");

                    b.Property<decimal>("credito");

                    b.HasKey("PaqueteId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FirmaClienteId");

                    b.HasIndex("UserId");

                    b.ToTable("PaquetesTuristicos");
                });

            modelBuilder.Entity("AgenciappHome.Models.Pasajero", b =>
                {
                    b.Property<Guid>("PasajeroId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("AuthorizedName");

                    b.Property<string>("AuthorizedRelation");

                    b.Property<string>("AuthorizesName");

                    b.Property<string>("AuthorizesRelation");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Email");

                    b.Property<DateTime>("FechaNac");

                    b.Property<Guid?>("ForArrivalDocId");

                    b.Property<string>("Gender");

                    b.Property<string>("IdentificationNo");

                    b.Property<bool>("IsMenor");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<string>("Nationality");

                    b.Property<string>("NotaryName");

                    b.Property<string>("OtroDocumento");

                    b.Property<DateTime>("OtroDocumentoExpDate");

                    b.Property<string>("OtroDocumentoNo");

                    b.Property<string>("PaisOtroDocumento");

                    b.Property<DateTime>("PasspotExpDate");

                    b.Property<string>("PasspotNumber");

                    b.Property<string>("PersonallyKnown");

                    b.Property<string>("Phone");

                    b.Property<string>("ProdIdentification");

                    b.Property<string>("State");

                    b.Property<Guid?>("TicketId");

                    b.Property<string>("Title");

                    b.Property<string>("TypeIdentification");

                    b.Property<Guid?>("UsaArrivalDocId");

                    b.Property<string>("Zip");

                    b.HasKey("PasajeroId");

                    b.HasIndex("ForArrivalDocId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsaArrivalDocId");

                    b.ToTable("Pasajero");
                });

            modelBuilder.Entity("AgenciappHome.Models.Passport", b =>
                {
                    b.Property<Guid>("PassportId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<string>("AgencyPassport");

                    b.Property<Guid?>("AgencyTransferidaId");

                    b.Property<string>("ApellidosReferencia");

                    b.Property<string>("ApellidosReferencia2");

                    b.Property<bool>("AppMovil");

                    b.Property<Guid?>("AuthorizationCardId");

                    b.Property<decimal>("Balance");

                    b.Property<DateTime?>("CanceledDate");

                    b.Property<int>("CantidadProrrogas");

                    b.Property<string>("CaracteEspesciales");

                    b.Property<string>("CarnetIdentidad");

                    b.Property<string>("CategoriaProfesion")
                        .IsRequired();

                    b.Property<Guid?>("ChequeOtorgamientoId");

                    b.Property<string>("CiudadCuba1");

                    b.Property<string>("CiudadCuba2");

                    b.Property<string>("CiudadEntrega");

                    b.Property<string>("ClasificacionMigratoria")
                        .IsRequired();

                    b.Property<Guid>("ClientId");

                    b.Property<string>("CodPostalEntrega");

                    b.Property<string>("CodigoPostalActual");

                    b.Property<string>("CodigoPostalTrabajo");

                    b.Property<string>("CodigoProvTrabajo");

                    b.Property<string>("ColorCabello")
                        .IsRequired();

                    b.Property<string>("ColorOjos")
                        .IsRequired();

                    b.Property<string>("ColorPiel")
                        .IsRequired();

                    b.Property<decimal>("Comision");

                    b.Property<string>("CountryPassport1");

                    b.Property<string>("CountryPassport2");

                    b.Property<bool>("CreatedByCode");

                    b.Property<decimal>("Credito");

                    b.Property<DateTime>("Dasde2");

                    b.Property<DateTime>("DateBirth");

                    b.Property<DateTime>("DateStatusEnviada");

                    b.Property<string>("DatosLaborales");

                    b.Property<decimal>("Descuento");

                    b.Property<DateTime>("Desde1");

                    b.Property<string>("DireccionActual");

                    b.Property<string>("DireccionCuba1");

                    b.Property<string>("DireccionCuba2");

                    b.Property<string>("DireccionEntrega");

                    b.Property<string>("DireccionReferencia");

                    b.Property<string>("DireccionTrabajo");

                    b.Property<string>("Email");

                    b.Property<string>("EmailTrabajo");

                    b.Property<DateTime?>("EmissionDate");

                    b.Property<string>("Estado");

                    b.Property<string>("EstadoActual");

                    b.Property<string>("EstadoCivil");

                    b.Property<string>("EstadoEntrega");

                    b.Property<string>("EstadoTrabajo");

                    b.Property<decimal>("Estatura");

                    b.Property<DateTime>("ExpedicionCertNaci");

                    b.Property<DateTime>("ExpirePassport1");

                    b.Property<DateTime>("ExpirePassport2");

                    b.Property<bool>("Express");

                    b.Property<DateTime>("FechaDespacho");

                    b.Property<DateTime>("FechaExpedicion");

                    b.Property<DateTime>("FechaImportacion");

                    b.Property<DateTime>("FechaOtorgamiento");

                    b.Property<DateTime>("FechaSalida");

                    b.Property<DateTime>("FechaSolicitud");

                    b.Property<Guid?>("FirmaClienteId");

                    b.Property<string>("Folio");

                    b.Property<DateTime>("Hasta1");

                    b.Property<DateTime>("Hasta2");

                    b.Property<DateTime>("InscipcionConsularDate");

                    b.Property<string>("InscripcionConsularNo");

                    b.Property<string>("LinkFedex");

                    b.Property<string>("Lugar");

                    b.Property<string>("LugarExpedCertNaci");

                    b.Property<string>("Madre");

                    b.Property<Guid?>("ManifiestoPasaporteId");

                    b.Property<Guid?>("MinoristaId");

                    b.Property<bool>("MismaDireccion");

                    b.Property<string>("MunicipioNacimiento");

                    b.Property<string>("MunicipioReferencia");

                    b.Property<bool>("NacidoOtroPais");

                    b.Property<bool>("NacidoUSA");

                    b.Property<string>("Nationality");

                    b.Property<string>("NivelCultural")
                        .IsRequired();

                    b.Property<string>("NoPasaporteDc");

                    b.Property<string>("NombreReferencia");

                    b.Property<string>("NombreReferencia2");

                    b.Property<string>("Nota");

                    b.Property<string>("NumDespacho");

                    b.Property<string>("NumPassport1");

                    b.Property<string>("NumPassport2");

                    b.Property<string>("Number2");

                    b.Property<string>("OFAC");

                    b.Property<string>("Ocupacion");

                    b.Property<string>("OrderNumber")
                        .IsRequired();

                    b.Property<bool>("Otorgamiento");

                    b.Property<decimal>("OtrosCostos");

                    b.Property<string>("Padre");

                    b.Property<decimal>("Pagado");

                    b.Property<string>("PaisActual");

                    b.Property<string>("PaisEntrega");

                    b.Property<string>("PaisNacimiento");

                    b.Property<string>("PaisResidencia");

                    b.Property<string>("PaisTrabajo");

                    b.Property<string>("PassaportNumber");

                    b.Property<Guid?>("PassportExpressId");

                    b.Property<decimal>("Precio");

                    b.Property<bool>("PrecioFoto");

                    b.Property<string>("PrimerApellidos");

                    b.Property<string>("PrimerNombre");

                    b.Property<string>("Profesion");

                    b.Property<string>("ProrrogaNumber");

                    b.Property<string>("ProrrogaType")
                        .IsRequired();

                    b.Property<string>("ProvinciaActual");

                    b.Property<string>("ProvinciaCuba1");

                    b.Property<string>("ProvinciaCuba2");

                    b.Property<string>("ProvinciaNacimiento");

                    b.Property<string>("ProvinciaReferencia");

                    b.Property<string>("ProvinciaTrabajo");

                    b.Property<string>("RazonNoDisponibilidad")
                        .IsRequired();

                    b.Property<string>("RegistroCivil");

                    b.Property<string>("RelacionFamiliar");

                    b.Property<string>("SegundoApellidos");

                    b.Property<string>("SegundoNombre");

                    b.Property<string>("ServicioConsular")
                        .IsRequired();

                    b.Property<string>("Sex")
                        .IsRequired();

                    b.Property<string>("Status");

                    b.Property<string>("Telefono");

                    b.Property<string>("TelefonoReferencia");

                    b.Property<string>("TelefonoTrabajo");

                    b.Property<string>("TipoSolicitud")
                        .IsRequired();

                    b.Property<string>("Tomo");

                    b.Property<decimal>("Total");

                    b.Property<string>("Tramite")
                        .IsRequired();

                    b.Property<string>("TransactionId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<Guid>("UserId");

                    b.Property<decimal>("ValuePrecioFoto");

                    b.Property<Guid?>("WholesalerDespachoId");

                    b.Property<Guid?>("WholesalerId");

                    b.Property<decimal>("costo");

                    b.Property<decimal>("costoProveedor");

                    b.Property<string>("fotoPasaporte");

                    b.HasKey("PassportId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AgencyId");

                    b.HasIndex("AgencyTransferidaId");

                    b.HasIndex("AuthorizationCardId");

                    b.HasIndex("ChequeOtorgamientoId")
                        .IsUnique()
                        .HasFilter("[ChequeOtorgamientoId] IS NOT NULL");

                    b.HasIndex("ClientId");

                    b.HasIndex("FirmaClienteId");

                    b.HasIndex("ManifiestoPasaporteId");

                    b.HasIndex("MinoristaId");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("PassportExpressId");

                    b.HasIndex("UserId");

                    b.HasIndex("WholesalerDespachoId");

                    b.HasIndex("WholesalerId");

                    b.ToTable("Passport");
                });

            modelBuilder.Entity("AgenciappHome.Models.PassportAux", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RealName");

                    b.HasKey("Name");

                    b.ToTable("PassportAux");
                });

            modelBuilder.Entity("AgenciappHome.Models.PassportAux2", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("PassportAux2");
                });

            modelBuilder.Entity("AgenciappHome.Models.PassportExpress", b =>
                {
                    b.Property<Guid>("PassportExpressId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Costo");

                    b.Property<decimal>("Precio");

                    b.Property<string>("servicioConsular");

                    b.HasKey("PassportExpressId");

                    b.ToTable("PassportExpresses");
                });

            modelBuilder.Entity("AgenciappHome.Models.PaymentCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BillingAddress")
                        .HasMaxLength(64);

                    b.Property<string>("BillingPhone")
                        .HasMaxLength(32);

                    b.Property<string>("City")
                        .HasMaxLength(64);

                    b.Property<string>("CountryIso2")
                        .HasMaxLength(2);

                    b.Property<string>("Expiration")
                        .HasMaxLength(8);

                    b.Property<string>("FirstName")
                        .HasMaxLength(64);

                    b.Property<string>("LastFour")
                        .HasMaxLength(4);

                    b.Property<string>("LastName")
                        .HasMaxLength(64);

                    b.Property<string>("State")
                        .HasMaxLength(64);

                    b.Property<string>("Token")
                        .HasMaxLength(64);

                    b.Property<string>("Type")
                        .HasMaxLength(32);

                    b.Property<Guid?>("UserClientId");

                    b.Property<int>("ZipCode")
                        .HasMaxLength(8);

                    b.HasKey("Id");

                    b.HasIndex("UserClientId");

                    b.ToTable("PaymentCards");
                });

            modelBuilder.Entity("AgenciappHome.Models.PaymentTicket", b =>
                {
                    b.Property<Guid>("PagoId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyId");

                    b.Property<Guid>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Number");

                    b.Property<Guid?>("OfficeId");

                    b.Property<Guid>("TicketId");

                    b.Property<Guid?>("UserId");

                    b.Property<decimal>("ValorPagado");

                    b.Property<string>("tipoPago");

                    b.HasKey("PagoId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ClientId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentTicket");
                });

            modelBuilder.Entity("AgenciappHome.Models.Phone", b =>
                {
                    b.Property<Guid>("PhoneId");

                    b.Property<bool>("Current");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("ReferenceId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("carrier");

                    b.Property<string>("sms_email");

                    b.HasKey("PhoneId");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("AgenciappHome.Models.PrecioPasaporte", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Precio");

                    b.Property<string>("ServicioConsular")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PrecioPasaportes");
                });

            modelBuilder.Entity("AgenciappHome.Models.PrecioRefMinorista", b =>
                {
                    b.Property<Guid>("PrecioRefMinoristaId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("precio");

                    b.HasKey("PrecioRefMinoristaId");

                    b.ToTable("PrecioRefMinoristas");
                });

            modelBuilder.Entity("AgenciappHome.Models.PreciosAutos", b =>
                {
                    b.Property<Guid>("PreciosAutosId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<decimal>("FeeFijo1");

                    b.Property<decimal>("FeeFijo10");

                    b.Property<decimal>("FeeFijo11");

                    b.Property<decimal>("FeeFijo12");

                    b.Property<decimal>("FeeFijo2");

                    b.Property<decimal>("FeeFijo3");

                    b.Property<decimal>("FeeFijo4");

                    b.Property<decimal>("FeeFijo5");

                    b.Property<decimal>("FeeFijo6");

                    b.Property<decimal>("FeeFijo7");

                    b.Property<decimal>("FeeFijo8");

                    b.Property<decimal>("FeeFijo9");

                    b.Property<decimal>("Minorista11");

                    b.Property<decimal>("Minorista110");

                    b.Property<decimal>("Minorista111");

                    b.Property<decimal>("Minorista112");

                    b.Property<decimal>("Minorista12");

                    b.Property<decimal>("Minorista13");

                    b.Property<decimal>("Minorista14");

                    b.Property<decimal>("Minorista15");

                    b.Property<decimal>("Minorista16");

                    b.Property<decimal>("Minorista17");

                    b.Property<decimal>("Minorista18");

                    b.Property<decimal>("Minorista19");

                    b.Property<decimal>("Minorista21");

                    b.Property<decimal>("Minorista210");

                    b.Property<decimal>("Minorista211");

                    b.Property<decimal>("Minorista212");

                    b.Property<decimal>("Minorista22");

                    b.Property<decimal>("Minorista23");

                    b.Property<decimal>("Minorista24");

                    b.Property<decimal>("Minorista25");

                    b.Property<decimal>("Minorista26");

                    b.Property<decimal>("Minorista27");

                    b.Property<decimal>("Minorista28");

                    b.Property<decimal>("Minorista29");

                    b.Property<decimal>("Precios1");

                    b.Property<decimal>("Precios10");

                    b.Property<decimal>("Precios11");

                    b.Property<decimal>("Precios12");

                    b.Property<decimal>("Precios2");

                    b.Property<decimal>("Precios3");

                    b.Property<decimal>("Precios4");

                    b.Property<decimal>("Precios5");

                    b.Property<decimal>("Precios6");

                    b.Property<decimal>("Precios7");

                    b.Property<decimal>("Precios8");

                    b.Property<decimal>("Precios9");

                    b.Property<Guid?>("RentadoraId");

                    b.Property<decimal>("Seguro1");

                    b.Property<decimal>("Seguro10");

                    b.Property<decimal>("Seguro11");

                    b.Property<decimal>("Seguro12");

                    b.Property<decimal>("Seguro2");

                    b.Property<decimal>("Seguro3");

                    b.Property<decimal>("Seguro4");

                    b.Property<decimal>("Seguro5");

                    b.Property<decimal>("Seguro6");

                    b.Property<decimal>("Seguro7");

                    b.Property<decimal>("Seguro8");

                    b.Property<decimal>("Seguro9");

                    b.HasKey("PreciosAutosId");

                    b.HasIndex("RentadoraId");

                    b.ToTable("PreciosAutos");
                });

            modelBuilder.Entity("AgenciappHome.Models.PriceProductByprovince", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("PrecioRefMinoristaId");

                    b.Property<decimal>("Price");

                    b.Property<Guid>("ProvinceId");

                    b.Property<Guid?>("SettingMinoristaProductId");

                    b.HasKey("Id");

                    b.HasIndex("PrecioRefMinoristaId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SettingMinoristaProductId");

                    b.ToTable("PriceProductByprovinces");
                });

            modelBuilder.Entity("AgenciappHome.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId");

                    b.Property<Guid>("AgencyId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<Guid?>("ProductoBodegaIdProducto");

                    b.Property<string>("TallaMarca")
                        .IsRequired()
                        .HasColumnName("Talla/Marca")
                        .HasMaxLength(50);

                    b.Property<string>("Tipo")
                        .IsRequired();

                    b.Property<Guid?>("WholesalerIdWholesaler");

                    b.Property<bool>("esDespachado");

                    b.HasKey("ProductId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AgencyId");

                    b.HasIndex("ProductoBodegaIdProducto");

                    b.HasIndex("WholesalerIdWholesaler");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("AgenciappHome.Models.ProductEM", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("EnvioMaritimoId");

                    b.Property<Guid>("IdEnvioMaritimo");

                    b.Property<Guid>("IdProduct");

                    b.Property<decimal>("Peso");

                    b.Property<int>("cantidad");

                    b.HasKey("Id");

                    b.HasIndex("EnvioMaritimoId");

                    b.HasIndex("IdProduct");

                    b.ToTable("ProductEMs");
                });

            modelBuilder.Entity("AgenciappHome.Models.ProductoBodega", b =>
                {
                    b.Property<Guid>("IdProducto")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode");

                    b.Property<string>("Codigo")
                        .HasMaxLength(20);

                    b.Property<string>("CodigoEan")
                        .HasColumnName("Codigo_EAN")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Descripcion");

                    b.Property<bool>("EnableShipping");

                    b.Property<string>("FichaTecnica")
                        .HasColumnName("Ficha_Tecnica")
                        .HasColumnType("text");

                    b.Property<Guid>("IdAgency");

                    b.Property<Guid>("IdCategoria");

                    b.Property<Guid>("IdProveedor");

                    b.Property<Guid>("IdUnidadMedida")
                        .HasColumnName("IdUnidad_Medida");

                    b.Property<string>("ImagenProducto")
                        .HasColumnName("Imagen_Producto")
                        .HasMaxLength(50);

                    b.Property<bool>("IsVisibleAppRapid");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("OrderByRelevance");

                    b.Property<Guid?>("Precio1MinoristaId");

                    b.Property<Guid?>("Precio2MinoristaId");

                    b.Property<Guid?>("Precio3MinoristaId");

                    b.Property<decimal?>("PrecioCompraReferencial")
                        .HasColumnName("Precio_Compra_Referencial")
                        .HasColumnType("decimal(11, 2)");

                    b.Property<decimal?>("PrecioVentaReferencial")
                        .HasColumnName("Precio_Venta_Referencial")
                        .HasColumnType("decimal(11, 2)");

                    b.Property<Guid?>("ProveedorIdWholesaler");

                    b.Property<decimal>("Shipping");

                    b.Property<string>("Terms");

                    b.Property<string>("Ubicacion")
                        .HasMaxLength(50);

                    b.Property<bool>("esVisible");

                    b.Property<bool>("isMoreSold");

                    b.HasKey("IdProducto");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdUnidadMedida");

                    b.HasIndex("Precio1MinoristaId");

                    b.HasIndex("Precio2MinoristaId");

                    b.HasIndex("Precio3MinoristaId");

                    b.HasIndex("ProveedorIdWholesaler");

                    b.ToTable("ProductosBodegas");
                });

            modelBuilder.Entity("AgenciappHome.Models.ProductoBodegaCatalogItem", b =>
                {
                    b.Property<Guid>("ProductoBodegaId");

                    b.Property<Guid>("CatalogItemId");

                    b.HasKey("ProductoBodegaId", "CatalogItemId");

                    b.HasIndex("CatalogItemId");

                    b.ToTable("ProductoBodegaCatalogItems");
                });

            modelBuilder.Entity("AgenciappHome.Models.ProductosVendidos", b =>
                {
                    b.Property<Guid>("ProductosVendidiosId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cantidad");

                    b.Property<Guid?>("MercadoId");

                    b.Property<Guid>("ProductId");

                    b.HasKey("ProductosVendidiosId");

                    b.HasIndex("MercadoId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductosVendidos");
                });

            modelBuilder.Entity("AgenciappHome.Models.Provincia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Order");

                    b.Property<Guid?>("PuntoEntregaId");

                    b.Property<Guid?>("ZonaId");

                    b.Property<string>("nombreProvincia");

                    b.HasKey("Id");

                    b.HasIndex("PuntoEntregaId");

                    b.HasIndex("ZonaId");

                    b.ToTable("Provincia");
                });

            modelBuilder.Entity("AgenciappHome.Models.PuntoEntrega", b =>
                {
                    b.Property<Guid>("PuntoEntregaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Direccion");

                    b.HasKey("PuntoEntregaId");

                    b.ToTable("PuntoEntrega");
                });

            modelBuilder.Entity("AgenciappHome.Models.Rechargue", b =>
                {
                    b.Property<Guid>("RechargueId");

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid?>("AuthorizationCardId");

                    b.Property<decimal>("Balance");

                    b.Property<DateTime?>("CanceledDate");

                    b.Property<Guid>("ClientId");

                    b.Property<decimal>("Count");

                    b.Property<decimal>("Credito");

                    b.Property<Guid?>("FirmaClienteId");

                    b.Property<decimal>("Import");

                    b.Property<string>("Nota");

                    b.Property<string>("Number")
                        .IsRequired();

                    b.Property<string>("NumberPhone")
                        .IsRequired();

                    b.Property<Guid?>("TipoPagoId");

                    b.Property<Guid?>("TipoRecargaId");

                    b.Property<Guid?>("UserId");

                    b.Property<decimal>("costoMayorista");

                    b.Property<DateTime>("date");

                    b.Property<string>("estado");

                    b.Property<Guid>("idTipoPago");

                    b.Property<decimal>("precioventa");

                    b.Property<decimal>("valorPagado");

                    b.Property<Guid?>("wholesalerIdWholesaler");

                    b.HasKey("RechargueId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AgencyId");

                    b.HasIndex("AuthorizationCardId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FirmaClienteId");

                    b.HasIndex("TipoPagoId");

                    b.HasIndex("TipoRecargaId");

                    b.HasIndex("UserId");

                    b.HasIndex("wholesalerIdWholesaler");

                    b.ToTable("Rechargue");
                });

            modelBuilder.Entity("AgenciappHome.Models.Reclamo", b =>
                {
                    b.Property<Guid>("ReclamoId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid?>("AsignadoId");

                    b.Property<Guid>("ClientId");

                    b.Property<string>("Estado");

                    b.Property<string>("Number");

                    b.Property<string>("OrderNumber");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("ReclamoId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("AsignadoId");

                    b.HasIndex("ClientId");

                    b.ToTable("Reclamos");
                });

            modelBuilder.Entity("AgenciappHome.Models.ReclamoTicket", b =>
                {
                    b.Property<Guid>("ReclamoTicketId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateAt");

                    b.Property<Guid?>("CreateByUserId");

                    b.Property<string>("Nota");

                    b.Property<Guid>("ReclamoId");

                    b.HasKey("ReclamoTicketId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("ReclamoId");

                    b.ToTable("ReclamoTicket");
                });

            modelBuilder.Entity("AgenciappHome.Models.RefundLog", b =>
                {
                    b.Property<Guid>("RefundLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyId");

                    b.Property<Guid>("Agencyd");

                    b.Property<decimal>("Amount");

                    b.Property<Guid>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("EnvioCaribeId");

                    b.Property<Guid?>("EnvioMaritimoId");

                    b.Property<string>("NumberOrder");

                    b.Property<string>("NumberRefound");

                    b.Property<Guid?>("OrderCubiqId");

                    b.Property<Guid?>("OrderId");

                    b.Property<Guid?>("PaqueteTuristicoId");

                    b.Property<Guid?>("PassportId");

                    b.Property<Guid?>("RechargueId");

                    b.Property<Guid?>("RecharueId");

                    b.Property<string>("Reference");

                    b.Property<Guid?>("RemesaId");

                    b.Property<Guid?>("ServicioId");

                    b.Property<string>("Status");

                    b.Property<Guid?>("TicketId");

                    b.Property<Guid>("UserId");

                    b.HasKey("RefundLogId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EnvioCaribeId");

                    b.HasIndex("EnvioMaritimoId");

                    b.HasIndex("OrderCubiqId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaqueteTuristicoId");

                    b.HasIndex("PassportId");

                    b.HasIndex("RechargueId");

                    b.HasIndex("RemesaId");

                    b.HasIndex("ServicioId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("RefundLogs");
                });

            modelBuilder.Entity("AgenciappHome.Models.RegistroEnvioEmails", b =>
                {
                    b.Property<Guid>("RegistroEnvioEmailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<string>("AgencyName");

                    b.Property<string>("descripción");

                    b.Property<string>("destinatario");

                    b.Property<DateTime>("fecha");

                    b.Property<string>("status");

                    b.HasKey("RegistroEnvioEmailsId");

                    b.ToTable("RegistroEnvioEmails");
                });

            modelBuilder.Entity("AgenciappHome.Models.RegistroEstado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("EnvioCaribeId");

                    b.Property<Guid?>("EnvioMaritimoId");

                    b.Property<string>("Estado");

                    b.Property<Guid?>("MercadoId");

                    b.Property<Guid?>("OrderCubiqId");

                    b.Property<Guid?>("OrderId");

                    b.Property<Guid?>("PaqueteTuristicoPaqueteId");

                    b.Property<Guid?>("PassportId");

                    b.Property<Guid?>("RechargueId");

                    b.Property<Guid?>("RemittanceId");

                    b.Property<Guid?>("ServicioId");

                    b.Property<Guid?>("TicketId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EnvioCaribeId");

                    b.HasIndex("EnvioMaritimoId");

                    b.HasIndex("MercadoId");

                    b.HasIndex("OrderCubiqId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaqueteTuristicoPaqueteId");

                    b.HasIndex("PassportId");

                    b.HasIndex("RechargueId");

                    b.HasIndex("RemittanceId");

                    b.HasIndex("ServicioId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("RegistroEstado");
                });

            modelBuilder.Entity("AgenciappHome.Models.RegistroPago", b =>
                {
                    b.Property<Guid>("RegistroPagoId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid?>("AuthorizationCardId");

                    b.Property<Guid?>("BillId");

                    b.Property<Guid?>("ClientId");

                    b.Property<Guid?>("CuentaBancariaId");

                    b.Property<Guid?>("EnvioCaribeId");

                    b.Property<Guid?>("EnvioMaritimoId");

                    b.Property<Guid?>("FacturaId");

                    b.Property<Guid?>("MercadoId");

                    b.Property<Guid>("OfficeId");

                    b.Property<Guid?>("OrderCubiqId");

                    b.Property<Guid?>("OrderId");

                    b.Property<Guid?>("PaqueteTuristicoId");

                    b.Property<Guid?>("PassportId");

                    b.Property<Guid?>("RechargueId");

                    b.Property<Guid?>("RemittanceId");

                    b.Property<Guid?>("ServicioId");

                    b.Property<Guid?>("TicketId");

                    b.Property<Guid>("UserId");

                    b.Property<Guid?>("ZelleItemId");

                    b.Property<DateTime>("date");

                    b.Property<decimal>("fee");

                    b.Property<string>("nota");

                    b.Property<string>("number");

                    b.Property<string>("recibe");

                    b.Property<string>("referecia");

                    b.Property<Guid>("tipoPagoId");

                    b.Property<decimal>("valorPagado");

                    b.HasKey("RegistroPagoId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("AuthorizationCardId");

                    b.HasIndex("BillId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CuentaBancariaId");

                    b.HasIndex("EnvioCaribeId");

                    b.HasIndex("EnvioMaritimoId");

                    b.HasIndex("FacturaId");

                    b.HasIndex("MercadoId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("OrderCubiqId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaqueteTuristicoId");

                    b.HasIndex("PassportId");

                    b.HasIndex("RechargueId");

                    b.HasIndex("RemittanceId");

                    b.HasIndex("ServicioId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.HasIndex("ZelleItemId");

                    b.HasIndex("tipoPagoId");

                    b.ToTable("RegistroPagos");
                });

            modelBuilder.Entity("AgenciappHome.Models.RegistroPagosToday", b =>
                {
                    b.Property<Guid>("RegistroPagoId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid?>("AuthorizationCardId");

                    b.Property<Guid?>("BillId");

                    b.Property<Guid?>("ClientId");

                    b.Property<Guid?>("CuentaBancariaId");

                    b.Property<Guid?>("EnvioCaribeId");

                    b.Property<Guid?>("EnvioMaritimoId");

                    b.Property<Guid?>("FacturaId");

                    b.Property<Guid?>("MercadoId");

                    b.Property<Guid>("OfficeId");

                    b.Property<Guid?>("OrderCubiqId");

                    b.Property<Guid?>("OrderId");

                    b.Property<Guid?>("PaqueteTuristicoId");

                    b.Property<Guid?>("PassportId");

                    b.Property<Guid?>("RechargueId");

                    b.Property<Guid?>("RemittanceId");

                    b.Property<Guid?>("ServicioId");

                    b.Property<Guid?>("TicketId");

                    b.Property<Guid>("UserId");

                    b.Property<Guid?>("ZelleItemId");

                    b.Property<DateTime>("date");

                    b.Property<decimal>("fee");

                    b.Property<string>("nota");

                    b.Property<string>("number");

                    b.Property<string>("recibe");

                    b.Property<string>("referecia");

                    b.Property<Guid>("tipoPagoId");

                    b.Property<decimal>("valorPagado");

                    b.HasKey("RegistroPagoId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("AuthorizationCardId");

                    b.HasIndex("BillId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CuentaBancariaId");

                    b.HasIndex("EnvioCaribeId");

                    b.HasIndex("EnvioMaritimoId");

                    b.HasIndex("FacturaId");

                    b.HasIndex("MercadoId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("OrderCubiqId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaqueteTuristicoId");

                    b.HasIndex("PassportId");

                    b.HasIndex("RechargueId");

                    b.HasIndex("RemittanceId");

                    b.HasIndex("ServicioId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.HasIndex("ZelleItemId");

                    b.HasIndex("tipoPagoId");

                    b.ToTable("RegistroPagosToday");
                });

            modelBuilder.Entity("AgenciappHome.Models.RelacionMinorista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid>("MinoristaId");

                    b.Property<int>("Modulo");

                    b.Property<int>("Tipo");

                    b.HasKey("Id");

                    b.ToTable("RelacionMinoristas");
                });

            modelBuilder.Entity("AgenciappHome.Models.RemesaAux", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RealName");

                    b.HasKey("Name");

                    b.ToTable("RemesaAux");
                });

            modelBuilder.Entity("AgenciappHome.Models.Remittance", b =>
                {
                    b.Property<Guid>("RemittanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AddPrecio");

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid?>("AgencyTransferidaId");

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("Balance");

                    b.Property<DateTime?>("CanceledDate");

                    b.Property<Guid?>("CardRemittanceId");

                    b.Property<Guid>("ClientId");

                    b.Property<Guid>("ContactId");

                    b.Property<DateTime>("Date");

                    b.Property<decimal>("ExchangeRate");

                    b.Property<Guid?>("IdAuthorizationCard");

                    b.Property<int>("MoneyType");

                    b.Property<string>("MultienvioTransactionId");

                    b.Property<string>("NoTarjeta");

                    b.Property<string>("Nota");

                    b.Property<string>("NotaTarjeta");

                    b.Property<string>("Number");

                    b.Property<string>("NumerosSerie");

                    b.Property<Guid>("OfficeId");

                    b.Property<decimal>("OtrosCostos");

                    b.Property<string>("Status");

                    b.Property<decimal>("TotalPagado");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<Guid>("UserId");

                    b.Property<decimal>("ValorPagado");

                    b.Property<Guid?>("authorizationCardId");

                    b.Property<decimal>("costoMayorista");

                    b.Property<decimal>("costoporDespacho");

                    b.Property<decimal>("credito");

                    b.Property<Guid?>("despachadaAIdWholesaler");

                    b.Property<DateTime>("fechaEntrega");

                    b.Property<DateTime>("fechadespacho");

                    b.Property<decimal>("feeCobro");

                    b.Property<bool>("isUsd");

                    b.Property<string>("numerodespacho");

                    b.Property<Guid?>("orderEntregadaId");

                    b.Property<Guid?>("orderRevisadaId");

                    b.Property<string>("tarifa");

                    b.Property<Guid?>("wholesalerIdWholesaler");

                    b.HasKey("RemittanceId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("AgencyTransferidaId");

                    b.HasIndex("CardRemittanceId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContactId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId");

                    b.HasIndex("authorizationCardId");

                    b.HasIndex("despachadaAIdWholesaler");

                    b.HasIndex("orderEntregadaId");

                    b.HasIndex("orderRevisadaId");

                    b.HasIndex("wholesalerIdWholesaler");

                    b.ToTable("Remittance");
                });

            modelBuilder.Entity("AgenciappHome.Models.Rentadora", b =>
                {
                    b.Property<Guid>("RentadoraId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<string>("Nombre");

                    b.Property<bool>("Visible");

                    b.Property<Guid>("WholesalerId");

                    b.HasKey("RentadoraId");

                    b.HasIndex("WholesalerId");

                    b.ToTable("Rentadora");
                });

            modelBuilder.Entity("AgenciappHome.Models.ResponseForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Identifier");

                    b.Property<string>("data");

                    b.Property<DateTime>("date");

                    b.Property<Guid?>("formBuilderId");

                    b.HasKey("Id");

                    b.HasIndex("formBuilderId");

                    b.ToTable("ResponseForm");
                });

            modelBuilder.Entity("AgenciappHome.Models.Roles", b =>
                {
                    b.Property<Guid>("RoleId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("RoleId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AgenciappHome.Models.ServConsularMayorista", b =>
                {
                    b.Property<Guid>("ServConsularMayoristaId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("WholesalerId");

                    b.Property<decimal>("costo");

                    b.Property<decimal>("precio");

                    b.Property<string>("servicio")
                        .IsRequired();

                    b.HasKey("ServConsularMayoristaId");

                    b.HasIndex("WholesalerId");

                    b.ToTable("ServConsularMayoristas");
                });

            modelBuilder.Entity("AgenciappHome.Models.ServicesByPayNotBilled", b =>
                {
                    b.Property<Guid>("ServiciosxPagarId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("IdWholesaler");

                    b.Property<decimal>("ImporteAPagar");

                    b.Property<bool>("IsPaymentProductShipping");

                    b.Property<string>("Tipo");

                    b.Property<string>("WholesalerName");

                    b.HasKey("ServiciosxPagarId");

                    b.ToTable("ServicesByPayNotBilled");
                });

            modelBuilder.Entity("AgenciappHome.Models.Servicio", b =>
                {
                    b.Property<Guid>("ServicioId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyId");

                    b.Property<Guid?>("AuthorizationCardId");

                    b.Property<DateTime?>("CanceledDate");

                    b.Property<decimal>("CostoXServicio");

                    b.Property<decimal>("Credito");

                    b.Property<string>("Data");

                    b.Property<Guid?>("FirmaClienteId");

                    b.Property<string>("LinkFedex");

                    b.Property<Guid?>("MinorAuthorizationId");

                    b.Property<Guid?>("MinoristaId");

                    b.Property<string>("Nota");

                    b.Property<Guid?>("OfficeId");

                    b.Property<Guid?>("PaqueteTuristicoId");

                    b.Property<Guid?>("SubServicioId");

                    b.Property<Guid?>("TipoPagoId");

                    b.Property<Guid?>("TipoServicioId");

                    b.Property<bool>("UsedCredito");

                    b.Property<Guid?>("UserId");

                    b.Property<decimal>("cantidadOrdenes_Tienda");

                    b.Property<Guid>("clienteClientId");

                    b.Property<decimal>("costo");

                    b.Property<decimal>("costoDespacho");

                    b.Property<decimal>("costoMayorista");

                    b.Property<decimal>("debe");

                    b.Property<Guid?>("despachadaAIdWholesaler");

                    b.Property<string>("estado");

                    b.Property<DateTime>("fecha");

                    b.Property<DateTime>("fechadespacho");

                    b.Property<DateTime>("fechaentregado");

                    b.Property<DateTime>("fecharecibido");

                    b.Property<decimal>("importe");

                    b.Property<decimal>("importePagado");

                    b.Property<decimal>("importeTotal");

                    b.Property<Guid?>("mayoristaIdWholesaler");

                    b.Property<string>("numero");

                    b.Property<string>("numerodespacho");

                    b.HasKey("ServicioId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("AuthorizationCardId");

                    b.HasIndex("FirmaClienteId");

                    b.HasIndex("MinorAuthorizationId");

                    b.HasIndex("MinoristaId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PaqueteTuristicoId");

                    b.HasIndex("SubServicioId");

                    b.HasIndex("TipoPagoId");

                    b.HasIndex("TipoServicioId");

                    b.HasIndex("UserId");

                    b.HasIndex("clienteClientId");

                    b.HasIndex("despachadaAIdWholesaler");

                    b.HasIndex("mayoristaIdWholesaler");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("AgenciappHome.Models.ServiciosxPagar", b =>
                {
                    b.Property<Guid>("ServiciosxPagarId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyId");

                    b.Property<Guid?>("BillId");

                    b.Property<Guid?>("CotizadorId");

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("EnvioCaribeId");

                    b.Property<Guid?>("EnvioMaritimoId");

                    b.Property<bool>("Express");

                    b.Property<decimal>("ImporteAPagar");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<bool>("IsPaymentProductShipping");

                    b.Property<Guid?>("MayoristaIdWholesaler");

                    b.Property<string>("NoServicio")
                        .IsRequired();

                    b.Property<bool>("NotaCredito");

                    b.Property<Guid?>("OrderCubicOrderCubiqId");

                    b.Property<Guid?>("OrderId");

                    b.Property<Guid?>("PassportId");

                    b.Property<Guid?>("RechargueId");

                    b.Property<Guid?>("RemittanceId");

                    b.Property<Guid?>("ReservaTicketId");

                    b.Property<Guid>("SId");

                    b.Property<Guid?>("ServicioId");

                    b.Property<string>("SubTipo");

                    b.Property<string>("Tipo")
                        .IsRequired();

                    b.HasKey("ServiciosxPagarId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("BillId");

                    b.HasIndex("CotizadorId");

                    b.HasIndex("EnvioCaribeId");

                    b.HasIndex("EnvioMaritimoId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("MayoristaIdWholesaler");

                    b.HasIndex("NoServicio");

                    b.HasIndex("OrderCubicOrderCubiqId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PassportId");

                    b.HasIndex("RechargueId");

                    b.HasIndex("RemittanceId");

                    b.HasIndex("ReservaTicketId");

                    b.HasIndex("SId");

                    b.HasIndex("ServicioId");

                    b.ToTable("ServiciosxPagar");
                });

            modelBuilder.Entity("AgenciappHome.Models.servicioxCobrar", b =>
                {
                    b.Property<Guid>("servicioxCobrarId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("FacturaId");

                    b.Property<Guid?>("MinoristaTramiteId");

                    b.Property<string>("NoServicio");

                    b.Property<string>("No_servicioxCobrar");

                    b.Property<Guid?>("OrderCubiqId");

                    b.Property<Guid?>("OrderId");

                    b.Property<Guid?>("PaqueteTuristicoPaqueteId");

                    b.Property<Guid?>("PassportId");

                    b.Property<Guid>("ServicioId");

                    b.Property<Guid?>("clienteClientId");

                    b.Property<decimal>("cobrado");

                    b.Property<DateTime>("date");

                    b.Property<Guid?>("destinatarioContactId");

                    b.Property<decimal>("importeACobrar");

                    b.Property<Guid?>("mayoristaAgencyId");

                    b.Property<Guid?>("minoristaAgencyId");

                    b.Property<Guid?>("remitenteClientId");

                    b.Property<string>("tramite");

                    b.Property<decimal>("valorTramite");

                    b.HasKey("servicioxCobrarId");

                    b.HasIndex("FacturaId");

                    b.HasIndex("MinoristaTramiteId");

                    b.HasIndex("OrderCubiqId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaqueteTuristicoPaqueteId");

                    b.HasIndex("PassportId");

                    b.HasIndex("clienteClientId");

                    b.HasIndex("destinatarioContactId");

                    b.HasIndex("mayoristaAgencyId");

                    b.HasIndex("minoristaAgencyId");

                    b.HasIndex("remitenteClientId");

                    b.ToTable("servicioxCobrar");
                });

            modelBuilder.Entity("AgenciappHome.Models.SettingMinoristaProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyId");

                    b.Property<string>("AliasName");

                    b.Property<decimal>("Price");

                    b.Property<Guid?>("ProductoBodegaIdProducto");

                    b.Property<bool>("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ProductoBodegaIdProducto");

                    b.ToTable("SettingMinoristaProducts");
                });

            modelBuilder.Entity("AgenciappHome.Models.SettingPassportExpress", b =>
                {
                    b.Property<Guid>("SettingPassportExpressId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<decimal>("Costo");

                    b.Property<decimal>("Price");

                    b.Property<string>("ServicioConsular");

                    b.HasKey("SettingPassportExpressId");

                    b.HasIndex("AgencyId");

                    b.ToTable("SettingPassportExpresses");
                });

            modelBuilder.Entity("AgenciappHome.Models.Shipping", b =>
                {
                    b.Property<Guid>("PackingId");

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid?>("CarrierId");

                    b.Property<decimal>("CostoPasaje");

                    b.Property<decimal>("GastoCuba");

                    b.Property<decimal>("GastoUsa");

                    b.Property<string>("NoDespachoDistributor");

                    b.Property<string>("Nota");

                    b.Property<string>("NotaEnvio");

                    b.Property<string>("Number");

                    b.Property<Guid>("OfficeId");

                    b.Property<Guid?>("PrincipalDistributorId");

                    b.Property<DateTime?>("ShippingDate");

                    b.Property<string>("Type");

                    b.Property<Guid?>("UserId");

                    b.Property<DateTime>("date");

                    b.Property<DateTime>("fechaEnvio");

                    b.Property<bool>("isReview");

                    b.Property<string>("numeroVuelo");

                    b.Property<decimal>("pesoActual");

                    b.Property<string>("status");

                    b.HasKey("PackingId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AgencyId");

                    b.HasIndex("CarrierId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PrincipalDistributorId");

                    b.HasIndex("UserId");

                    b.ToTable("Shipping");
                });

            modelBuilder.Entity("AgenciappHome.Models.ShippingItem", b =>
                {
                    b.Property<Guid>("ShippingItemId");

                    b.Property<Guid>("PackageId");

                    b.Property<Guid>("PackingId");

                    b.Property<Guid>("ProductId");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<bool>("isReview");

                    b.Property<bool>("isSend");

                    b.HasKey("ShippingItemId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PackageId");

                    b.HasIndex("PackingId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShippingItem");
                });

            modelBuilder.Entity("AgenciappHome.Models.StatusDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyId");

                    b.Property<string>("Description");

                    b.Property<string>("Staus");

                    b.HasKey("Id");

                    b.ToTable("StatusDescriptions");
                });

            modelBuilder.Entity("AgenciappHome.Models.SubServicio", b =>
                {
                    b.Property<Guid>("SubServicioId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Cost");

                    b.Property<string>("Nombre");

                    b.Property<decimal>("Price");

                    b.Property<Guid>("TipoServicioId");

                    b.Property<bool>("Visibility");

                    b.Property<decimal>("WholesaleCosto");

                    b.HasKey("SubServicioId");

                    b.HasIndex("TipoServicioId");

                    b.ToTable("SubServicios");
                });

            modelBuilder.Entity("AgenciappHome.Models.Ticket", b =>
                {
                    b.Property<Guid>("TicketId");

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid?>("AgencyTransferidaId");

                    b.Property<Guid>("AirlineFlightsId");

                    b.Property<int>("AmountPassengers");

                    b.Property<DateTime?>("CanceledDate");

                    b.Property<int>("CantidadAdultos");

                    b.Property<int>("CantidadHabitaciones");

                    b.Property<int>("CantidadInfantes");

                    b.Property<int>("CantidadaMenores");

                    b.Property<string>("CategoriaAuto");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<decimal>("Charges");

                    b.Property<string>("Checked")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("ClientId");

                    b.Property<bool>("ClientIsCarrier");

                    b.Property<decimal>("Commission");

                    b.Property<decimal>("Cost");

                    b.Property<decimal>("CostoMayorista");

                    b.Property<bool>("CreatedByCode");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("Credito");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Debit");

                    b.Property<string>("DepartureCity");

                    b.Property<string>("DepartureTravelClass");

                    b.Property<string>("Description");

                    b.Property<string>("DestinationCity");

                    b.Property<decimal>("Discount");

                    b.Property<Guid?>("DiscountCodeId");

                    b.Property<string>("Door")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("Fee");

                    b.Property<Guid?>("FirmaClienteId");

                    b.Property<string>("Flight");

                    b.Property<string>("FromRegreso");

                    b.Property<string>("FromSalida");

                    b.Property<DateTime>("HoraRegreso");

                    b.Property<DateTime>("HoraSalida");

                    b.Property<Guid?>("HotelId");

                    b.Property<Guid>("IdAuthorizationCard");

                    b.Property<Guid?>("IdWholesaler");

                    b.Property<bool>("IsCharter");

                    b.Property<bool>("IsMovileApp");

                    b.Property<string>("MerchantTransactionId");

                    b.Property<Guid?>("MinoristaId");

                    b.Property<string>("ModeloAuto");

                    b.Property<string>("MunicipioReferencia");

                    b.Property<string>("NoConfirmacion");

                    b.Property<string>("NoDespacho");

                    b.Property<string>("NoVueloRegreso");

                    b.Property<string>("NombreAerolinea");

                    b.Property<string>("NombreCharter");

                    b.Property<Guid>("OfficeId");

                    b.Property<Guid?>("PaqueteTuristicoId");

                    b.Property<decimal>("Payment");

                    b.Property<decimal>("Price");

                    b.Property<string>("ProvinciaReferencia");

                    b.Property<string>("PuertaSalida");

                    b.Property<string>("PuertaSalidaRegreso");

                    b.Property<int>("RefPaymentType");

                    b.Property<string>("RefZelleNumber");

                    b.Property<string>("ReferenceContactName");

                    b.Property<string>("ReferenceContactPhone");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("RentadoraId");

                    b.Property<string>("ReservationNumber");

                    b.Property<string>("ReturnFromCity");

                    b.Property<string>("ReturnTRavelClass");

                    b.Property<string>("ReturnToCity");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<decimal>("Tax");

                    b.Property<string>("TelefonoReferencia");

                    b.Property<string>("TicketBy")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ToRegreso");

                    b.Property<string>("ToSalida");

                    b.Property<decimal>("Total");

                    b.Property<string>("TransmisionAuto");

                    b.Property<string>("Tripulada");

                    b.Property<string>("TypePayment")
                        .IsRequired();

                    b.Property<string>("UserAirline");

                    b.Property<Guid?>("UserId");

                    b.Property<Guid?>("authorizationCardId");

                    b.Property<string>("type");

                    b.HasKey("TicketId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AgencyId");

                    b.HasIndex("AgencyTransferidaId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DiscountCodeId");

                    b.HasIndex("FirmaClienteId");

                    b.HasIndex("HotelId");

                    b.HasIndex("IdWholesaler");

                    b.HasIndex("MinoristaId");

                    b.HasIndex("PaqueteTuristicoId");

                    b.HasIndex("RentadoraId");

                    b.HasIndex("UserId");

                    b.HasIndex("authorizationCardId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("AgenciappHome.Models.TipoCuenta", b =>
                {
                    b.Property<Guid>("IdTipoCuenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdTipo_Cuenta");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IdTipoCuenta");

                    b.ToTable("Tipos_Cuenta");
                });

            modelBuilder.Entity("AgenciappHome.Models.TipoDocumento", b =>
                {
                    b.Property<Guid>("IdTipoDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdTipo_Documento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IdTipoDocumento");

                    b.ToTable("Tipos_Documento");
                });

            modelBuilder.Entity("AgenciappHome.Models.TipoHabitacion", b =>
                {
                    b.Property<string>("Tipo")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Order");

                    b.HasKey("Tipo");

                    b.ToTable("TipoHabitacion");
                });

            modelBuilder.Entity("AgenciappHome.Models.TipoMovimiento", b =>
                {
                    b.Property<Guid>("IdTipoMovimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdTipo_Movimiento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IdTipoMovimiento");

                    b.ToTable("Tipos_Movimiento");
                });

            modelBuilder.Entity("AgenciappHome.Models.TipoPago", b =>
                {
                    b.Property<Guid>("TipoPagoId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("TipoPagoId");

                    b.ToTable("TipoPago");
                });

            modelBuilder.Entity("AgenciappHome.Models.TipoRecarga", b =>
                {
                    b.Property<Guid>("TipoRecargaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("tipo");

                    b.HasKey("TipoRecargaId");

                    b.ToTable("tipoRecarga");
                });

            modelBuilder.Entity("AgenciappHome.Models.TipoServicio", b =>
                {
                    b.Property<Guid>("TipoServicioId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyId");

                    b.Property<decimal>("Cost");

                    b.Property<string>("Nombre");

                    b.Property<bool>("Package");

                    b.Property<decimal>("Price");

                    b.Property<bool>("Visibility");

                    b.Property<decimal>("WholesaleCosto");

                    b.HasKey("TipoServicioId");

                    b.HasIndex("AgencyId");

                    b.ToTable("TipoServicios");
                });

            modelBuilder.Entity("AgenciappHome.Models.TipoServicioMayorista", b =>
                {
                    b.Property<Guid>("TipoServicioMayoristaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.Property<Guid?>("WholesalerIdWholesaler");

                    b.Property<Guid?>("WholesalerIdWholesaler1");

                    b.Property<decimal>("costoAereo");

                    b.Property<decimal>("costoMaritimo");

                    b.Property<decimal>("pventaAereo");

                    b.Property<decimal>("pventaMaritimo");

                    b.HasKey("TipoServicioMayoristaId");

                    b.HasIndex("WholesalerIdWholesaler");

                    b.HasIndex("WholesalerIdWholesaler1");

                    b.ToTable("TipoServicioMayoristas");
                });

            modelBuilder.Entity("AgenciappHome.Models.TramiteEmpleado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdAgency");

                    b.Property<Guid>("IdEmpleado");

                    b.Property<Guid>("IdTramite");

                    b.Property<DateTime>("fecha");

                    b.Property<string>("tipoTramite");

                    b.HasKey("Id");

                    b.ToTable("TramiteEmpleado");
                });

            modelBuilder.Entity("AgenciappHome.Models.UnidadMedida", b =>
                {
                    b.Property<Guid>("IdUnidadMedida")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdUnidad_Medida");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IdUnidadMedida");

                    b.ToTable("Unidades_Medida");
                });

            modelBuilder.Entity("AgenciappHome.Models.User", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("AgencyId");

                    b.Property<Guid?>("AgencyRefId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime?>("ExpiresSecureCode")
                        .HasColumnType("datetime");

                    b.Property<string>("ImagenProfile");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("SecureCode")
                        .HasMaxLength(250);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UsernameTicket");

                    b.Property<string>("UsernameTicket2");

                    b.Property<string>("UsernameTicket3");

                    b.Property<string>("UsernameTicket4");

                    b.Property<string>("firmaname");

                    b.Property<string>("otroUsername");

                    b.Property<bool>("viewAdministracion");

                    b.Property<bool>("viewcuentas");

                    b.Property<bool>("viewindexadmin");

                    b.HasKey("UserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("User");
                });

            modelBuilder.Entity("AgenciappHome.Models.UserAgencyTransferred", b =>
                {
                    b.Property<Guid>("AgencyId");

                    b.Property<Guid>("UserId");

                    b.Property<Guid?>("UserId1");

                    b.HasKey("AgencyId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserAgencyTransferreds");
                });

            modelBuilder.Entity("AgenciappHome.Models.UserOffice", b =>
                {
                    b.Property<Guid>("UserOfficeId");

                    b.Property<Guid>("OfficeId");

                    b.Property<Guid>("UserId");

                    b.HasKey("UserOfficeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("UserOffice");
                });

            modelBuilder.Entity("AgenciappHome.Models.UserWholesaler", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("WholesalerId");

                    b.HasKey("UserId", "WholesalerId");

                    b.HasIndex("WholesalerId");

                    b.ToTable("UserWholesalers");
                });

            modelBuilder.Entity("AgenciappHome.Models.ValorAduanal", b =>
                {
                    b.Property<Guid>("ValorAduanalId");

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Observaciones")
                        .HasMaxLength(250);

                    b.Property<string>("Um")
                        .IsRequired()
                        .HasColumnName("UM")
                        .HasMaxLength(50);

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("ValorAduanalId");

                    b.ToTable("ValorAduanal");
                });

            modelBuilder.Entity("AgenciappHome.Models.ValorAduanalItem", b =>
                {
                    b.Property<Guid>("ValorAduanalItemId");

                    b.Property<Guid?>("OrderCubiqId");

                    b.Property<Guid>("OrderId");

                    b.Property<Guid>("ValorAduanalId");

                    b.HasKey("ValorAduanalItemId");

                    b.HasIndex("OrderCubiqId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ValorAduanalId");

                    b.ToTable("ValorAduanalItem");
                });

            modelBuilder.Entity("AgenciappHome.Models.ValorAduanalItemEnvMaritimo", b =>
                {
                    b.Property<Guid>("ValorAduanalItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EnvioId");

                    b.Property<Guid>("ValorAduanalId");

                    b.HasKey("ValorAduanalItemId");

                    b.HasIndex("EnvioId");

                    b.HasIndex("ValorAduanalId");

                    b.ToTable("ValorAduanalItemEnvMaritimos");
                });

            modelBuilder.Entity("AgenciappHome.Models.ValoresxTramite", b =>
                {
                    b.Property<Guid>("ValoresxTramiteId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CostosxModuloId");

                    b.Property<string>("Tramite");

                    b.HasKey("ValoresxTramiteId");

                    b.HasIndex("CostosxModuloId");

                    b.ToTable("ValoresxTramite");
                });

            modelBuilder.Entity("AgenciappHome.Models.ValorProvincia", b =>
                {
                    b.Property<Guid>("ValorProvinciaId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("listValoresValoresxTramiteId");

                    b.Property<string>("provincia");

                    b.Property<decimal>("valor");

                    b.Property<decimal>("valor2");

                    b.Property<decimal>("valor3");

                    b.Property<decimal>("valor4");

                    b.Property<decimal>("valor5");

                    b.Property<decimal>("valor6");

                    b.HasKey("ValorProvinciaId");

                    b.HasIndex("listValoresValoresxTramiteId");

                    b.ToTable("ValorProvincia");
                });

            modelBuilder.Entity("AgenciappHome.Models.Wholesaler", b =>
                {
                    b.Property<Guid>("IdWholesaler")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AddPrecioCombo");

                    b.Property<Guid>("AgencyId");

                    b.Property<string>("CancellationPolicies");

                    b.Property<Guid?>("CategoryIdCategory");

                    b.Property<bool>("Comodin");

                    b.Property<decimal>("CostTypePackage")
                        .HasColumnType("decimal(18,9)");

                    b.Property<decimal>("Costo10Mayorista");

                    b.Property<decimal>("Costo11Mayorista");

                    b.Property<decimal>("Costo12Mayorista");

                    b.Property<decimal>("Costo2Mayorista");

                    b.Property<decimal>("Costo3Mayorista");

                    b.Property<decimal>("Costo4Mayorista");

                    b.Property<decimal>("Costo5Mayorista");

                    b.Property<decimal>("Costo6Mayorista");

                    b.Property<decimal>("Costo7Mayorista");

                    b.Property<decimal>("Costo8Mayorista");

                    b.Property<decimal>("Costo9Mayorista");

                    b.Property<decimal>("CostoMayorista");

                    b.Property<bool>("Default");

                    b.Property<bool>("EsVisible");

                    b.Property<decimal>("ExchangeRate");

                    b.Property<decimal>("PrecioCelular");

                    b.Property<decimal>("PrecioCubacel");

                    b.Property<decimal>("PrecioNauta");

                    b.Property<decimal>("PriceTypePackage")
                        .HasColumnType("decimal(18,9)");

                    b.Property<string>("Tags");

                    b.Property<string>("TermsConditions");

                    b.Property<int>("TypeMaritimo");

                    b.Property<string>("address");

                    b.Property<string>("bankAccount");

                    b.Property<bool>("byTransferencia");

                    b.Property<decimal>("costoCelular");

                    b.Property<decimal>("costoCubacel");

                    b.Property<decimal>("costoNauta");

                    b.Property<decimal>("creditCup");

                    b.Property<decimal>("creditEur");

                    b.Property<decimal>("creditUsd");

                    b.Property<string>("email");

                    b.Property<string>("name");

                    b.Property<string>("phone");

                    b.Property<decimal>("precioVenta");

                    b.Property<decimal>("precioVenta2");

                    b.Property<decimal>("precioVentaMedicina");

                    b.HasKey("IdWholesaler");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CategoryIdCategory");

                    b.ToTable("Wholesalers");
                });

            modelBuilder.Entity("AgenciappHome.Models.ZelleEmailSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("ZelleEmailSettings");
                });

            modelBuilder.Entity("AgenciappHome.Models.ZelleItem", b =>
                {
                    b.Property<Guid>("ZellItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<decimal>("Amount");

                    b.Property<string>("Client");

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("EnvioCaribeId");

                    b.Property<Guid?>("EnvioMaritimoId");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<string>("Nota");

                    b.Property<Guid?>("OrderCubicOrderCubiqId");

                    b.Property<Guid?>("OrderId");

                    b.Property<string>("OrderNumber");

                    b.Property<Guid?>("PaqueteTuristicoPaqueteId");

                    b.Property<Guid?>("PassportId");

                    b.Property<Guid?>("RechargueId");

                    b.Property<Guid?>("ReferenceId");

                    b.Property<Guid?>("RemittanceId");

                    b.Property<Guid?>("ReservaTicketId");

                    b.Property<Guid?>("ServicioId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("ZellItemId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("EnvioCaribeId");

                    b.HasIndex("EnvioMaritimoId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("OrderCubicOrderCubiqId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaqueteTuristicoPaqueteId");

                    b.HasIndex("PassportId");

                    b.HasIndex("RechargueId");

                    b.HasIndex("RemittanceId");

                    b.HasIndex("ReservaTicketId");

                    b.HasIndex("ServicioId");

                    b.ToTable("ZelleItems");
                });

            modelBuilder.Entity("AgenciappHome.Models.Zona", b =>
                {
                    b.Property<Guid>("ZonaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<decimal>("Precio");

                    b.HasKey("ZonaId");

                    b.ToTable("Zona");
                });

            modelBuilder.Entity("RapidMultiservice.Models.Responses.CatalogItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyId");

                    b.Property<string>("ImageUrl");

                    b.Property<Guid>("LandingItemId");

                    b.Property<string>("Name");

                    b.Property<Guid?>("RefrenceId");

                    b.Property<int>("order");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("LandingItemId");

                    b.ToTable("CatalogItems");
                });

            modelBuilder.Entity("RapidMultiservice.Models.Responses.LandingItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgencyId");

                    b.Property<string>("CustomNavigation");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("LandingItems");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.AttachmentPassport", b =>
                {
                    b.HasBaseType("Agenciapp.Domain.Models.Attachment");

                    b.Property<string>("Description");

                    b.Property<Guid?>("PassportId");

                    b.HasIndex("PassportId");

                    b.ToTable("AttachmentPassport");

                    b.HasDiscriminator().HasValue("AttachmentPassport");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.AttachmentReclamo", b =>
                {
                    b.HasBaseType("Agenciapp.Domain.Models.Attachment");

                    b.Property<string>("Description")
                        .HasColumnName("AttachmentReclamo_Description");

                    b.Property<Guid?>("ReclamoId");

                    b.HasIndex("ReclamoId");

                    b.ToTable("AttachmentReclamo");

                    b.HasDiscriminator().HasValue("AttachmentReclamo");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.AttachmentServicio", b =>
                {
                    b.HasBaseType("Agenciapp.Domain.Models.Attachment");

                    b.Property<string>("Description")
                        .HasColumnName("AttachmentServicio_Description");

                    b.Property<Guid?>("ServicioId");

                    b.HasIndex("ServicioId");

                    b.ToTable("AttachmentServicio");

                    b.HasDiscriminator().HasValue("AttachmentServicio");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ChequeHE11", b =>
                {
                    b.HasBaseType("Agenciapp.Domain.Models.Cheque");

                    b.Property<Guid?>("PassportId");

                    b.HasIndex("PassportId");

                    b.ToTable("ChequeHE11");

                    b.HasDiscriminator().HasValue("ChequeHE11");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ChequeOtorgamiento", b =>
                {
                    b.HasBaseType("Agenciapp.Domain.Models.Cheque");


                    b.ToTable("ChequeOtorgamiento");

                    b.HasDiscriminator().HasValue("ChequeOtorgamiento");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ChequePrimeraVez", b =>
                {
                    b.HasBaseType("Agenciapp.Domain.Models.Cheque");

                    b.Property<bool>("Control");

                    b.Property<Guid?>("PassportId")
                        .HasColumnName("ChequePrimeraVez_PassportId");

                    b.HasIndex("PassportId");

                    b.ToTable("ChequePrimeraVez");

                    b.HasDiscriminator().HasValue("ChequePrimeraVez");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ChequeProrroga", b =>
                {
                    b.HasBaseType("Agenciapp.Domain.Models.Cheque");


                    b.ToTable("ChequeProrroga");

                    b.HasDiscriminator().HasValue("ChequeProrroga");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ChequeProrrogaDoble", b =>
                {
                    b.HasBaseType("Agenciapp.Domain.Models.Cheque");


                    b.ToTable("ChequeProrrogaDoble");

                    b.HasDiscriminator().HasValue("ChequeProrrogaDoble");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ChequeRenovacion", b =>
                {
                    b.HasBaseType("Agenciapp.Domain.Models.Cheque");

                    b.Property<bool>("Control")
                        .HasColumnName("ChequeRenovacion_Control");

                    b.ToTable("ChequeRenovacion");

                    b.HasDiscriminator().HasValue("ChequeRenovacion");
                });

            modelBuilder.Entity("AgenciappHome.Models.DocumentAttachment", b =>
                {
                    b.HasBaseType("AgenciappHome.Models.AttachmentTicket");

                    b.Property<Guid?>("TicketId1");

                    b.Property<string>("filename");

                    b.HasIndex("TicketId1");

                    b.ToTable("DocumentAttachment");

                    b.HasDiscriminator().HasValue("DocumentAttachment");
                });

            modelBuilder.Entity("AgenciappHome.Models.ImageAttachment", b =>
                {
                    b.HasBaseType("AgenciappHome.Models.AttachmentTicket");

                    b.Property<Guid?>("TicketId1")
                        .HasColumnName("ImageAttachment_TicketId1");

                    b.Property<byte[]>("value");

                    b.HasIndex("TicketId1");

                    b.ToTable("ImageAttachment");

                    b.HasDiscriminator().HasValue("ImageAttachment");
                });

            modelBuilder.Entity("AgenciappHome.Models.CostoxModuloMayorista", b =>
                {
                    b.HasBaseType("AgenciappHome.Models.CostosxModulo");

                    b.Property<Guid>("AgencyMayoristaId");

                    b.Property<bool>("Visibility");

                    b.ToTable("CostoxModuloMayorista");

                    b.HasDiscriminator().HasValue("CostoxModuloMayorista");
                });

            modelBuilder.Entity("AgenciappHome.Models.CreditWholesaler", b =>
                {
                    b.HasBaseType("AgenciappHome.Models.Credit");

                    b.Property<string>("MoneyType")
                        .IsRequired();

                    b.Property<Guid>("WholesalerId");

                    b.HasIndex("WholesalerId");

                    b.ToTable("CreditWholesaler");

                    b.HasDiscriminator().HasValue("CreditWholesaler");
                });

            modelBuilder.Entity("AgenciappHome.Models.IdImage", b =>
                {
                    b.HasBaseType("AgenciappHome.Models.ImageClient");

                    b.Property<string>("description");

                    b.ToTable("IdImage");

                    b.HasDiscriminator().HasValue("IdImage");
                });

            modelBuilder.Entity("AgenciappHome.Models.PassportImage", b =>
                {
                    b.HasBaseType("AgenciappHome.Models.ImageClient");

                    b.Property<DateTime>("ExpirationDate");

                    b.ToTable("PassportImage");

                    b.HasDiscriminator().HasValue("PassportImage");
                });

            modelBuilder.Entity("AgenciappHome.Models.ResidenciaImage", b =>
                {
                    b.HasBaseType("AgenciappHome.Models.ImageClient");


                    b.ToTable("ResidenciaImage");

                    b.HasDiscriminator().HasValue("ResidenciaImage");
                });

            modelBuilder.Entity("AgenciappHome.Models.ImagenPromotionPassport", b =>
                {
                    b.HasBaseType("AgenciappHome.Models.ImagenPromotion");


                    b.ToTable("ImagenPromotionPassport");

                    b.HasDiscriminator().HasValue("ImagenPromotionPassport");
                });

            modelBuilder.Entity("AgenciappHome.Models.ImagenPromotionRapidApp", b =>
                {
                    b.HasBaseType("AgenciappHome.Models.ImagenPromotion");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<Guid?>("TypeIdReference");

                    b.ToTable("ImagenPromotionRapidApp");

                    b.HasDiscriminator().HasValue("ImagenPromotionRapidApp");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.AccessGuiaAereaAgency", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("AgenciappHome.Models.GuiaAerea", "GuiaAerea")
                        .WithMany("AccessGuiaAereaAgencies")
                        .HasForeignKey("GuiaAereaId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ApiPassport.IncompletePassport", b =>
                {
                    b.HasOne("AgenciappHome.Models.ApiModel.UserClient", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ApiPassportSetting", b =>
                {
                    b.OwnsOne("Agenciapp.Domain.Models.PhoneSupport", "PhoneSupport", b1 =>
                        {
                            b1.Property<Guid>("ApiPassportSettingId");

                            b1.Property<string>("Phone");

                            b1.Property<string>("TextDefault");

                            b1.ToTable("ApiPassportSetting");

                            b1.HasOne("Agenciapp.Domain.Models.ApiPassportSetting")
                                .WithOne("PhoneSupport")
                                .HasForeignKey("Agenciapp.Domain.Models.PhoneSupport", "ApiPassportSettingId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.BuildEmail.EmailAttached", b =>
                {
                    b.HasOne("Agenciapp.Domain.Models.BuildEmail.EmailBody", "EmailBody")
                        .WithMany("EmailAttacheds")
                        .HasForeignKey("EmailBodyId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.BuildEmail.EmailBody", b =>
                {
                    b.HasOne("Agenciapp.Domain.Models.BuildEmail.EmailTemplate", "EmailTemplate")
                        .WithMany("EmailBodies")
                        .HasForeignKey("EmailTemplateId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.BuildEmail.EmailTemplate", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.BuildEmail.RegistrationSendEmail", b =>
                {
                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany("RegistrationSendEmail")
                        .HasForeignKey("ClientId");

                    b.HasOne("Agenciapp.Domain.Models.BuildEmail.EmailBody", "EmailBody")
                        .WithMany()
                        .HasForeignKey("EmailBodyId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.Cheque", b =>
                {
                    b.HasOne("AgenciappHome.Models.ManifiestoPasaporte", "ManifiestoPasaporte")
                        .WithMany("Cheques")
                        .HasForeignKey("ManifiestoPasaporteId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ConnectionLog", b =>
                {
                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ContainerGuiaCubiq", b =>
                {
                    b.HasOne("AgenciappHome.Models.GuiaAerea", "GuiaAerea")
                        .WithMany("Containers")
                        .HasForeignKey("GuiaAereaId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.CostoTraslado", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.HMpaquetesPriceByProvince", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AgenciappHome.Models.Municipio", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AgenciappHome.Models.Provincia", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AgenciappHome.Models.Agency", "RetailAgency")
                        .WithMany()
                        .HasForeignKey("RetailAgencyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.InvoiceNote", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("AgenciappHome.Models.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeUserId");

                    b.HasOne("AgenciappHome.Models.EnvioCaribe", "EnvioCaribe")
                        .WithMany()
                        .HasForeignKey("EnvioCaribeId");

                    b.HasOne("AgenciappHome.Models.EnvioMaritimo", "EnvioMaritimo")
                        .WithMany()
                        .HasForeignKey("EnvioMaritimoId");

                    b.HasOne("AgenciappHome.Models.OrderCubiq", "OrderCubiq")
                        .WithMany()
                        .HasForeignKey("OrderCubiqId");

                    b.HasOne("AgenciappHome.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("AgenciappHome.Models.Passport", "Passport")
                        .WithMany()
                        .HasForeignKey("PassportId");

                    b.HasOne("AgenciappHome.Models.Rechargue", "Rechargue")
                        .WithMany()
                        .HasForeignKey("RechargueId");

                    b.HasOne("AgenciappHome.Models.Remittance", "Remittance")
                        .WithMany()
                        .HasForeignKey("RemittanceId");

                    b.HasOne("AgenciappHome.Models.Servicio", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId");

                    b.HasOne("AgenciappHome.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.HasOne("AgenciappHome.Models.Wholesaler", "Wholesaler")
                        .WithMany()
                        .HasForeignKey("WholesalerIdWholesaler");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.Note", b =>
                {
                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany("Notes")
                        .HasForeignKey("ClientId");

                    b.HasOne("AgenciappHome.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserUserId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.Notification.Notification", b =>
                {
                    b.HasOne("AgenciappHome.Models.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeUserId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.PromoCode", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("AgenciappHome.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ReporteCobro", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.Setting", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.StoredProduct", b =>
                {
                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.Subject", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.Task_", b =>
                {
                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany("Tasks")
                        .HasForeignKey("ClientId");

                    b.HasOne("AgenciappHome.Models.User", "Employee")
                        .WithMany("Tasks")
                        .HasForeignKey("EmployeeUserId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.TaskLog", b =>
                {
                    b.HasOne("Agenciapp.Domain.Models.Task_", "Task")
                        .WithMany("Logs")
                        .HasForeignKey("TaskId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.UserDistributor", b =>
                {
                    b.HasOne("AgenciappHome.Models.User", "Distributor")
                        .WithMany()
                        .HasForeignKey("DistributorId");

                    b.HasOne("AgenciappHome.Models.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("AgenciappHome.Models.AccessListUser", b =>
                {
                    b.HasOne("AgenciappHome.Models.AccessList", "accessList")
                        .WithMany("AccessListUsers")
                        .HasForeignKey("AccessListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.User", "user")
                        .WithMany("AccessListUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Agency", b =>
                {
                    b.HasOne("Agenciapp.Domain.Models.ValueObject.EmailAddress", "EmailAddress")
                        .WithMany()
                        .HasForeignKey("EmailAddressId");

                    b.HasOne("AgenciappHome.Models.Phone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneId");
                });

            modelBuilder.Entity("AgenciappHome.Models.AgencyPrecioRefMinorista", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany("AgencyPrecioRefMinoristas")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.PrecioRefMinorista", "PrecioRefMinorista")
                        .WithMany("AgencyPrecioRefMinoristas")
                        .HasForeignKey("PrecioRefMinoristaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.ApiModel.FcmToken", b =>
                {
                    b.HasOne("AgenciappHome.Models.ApiModel.UserClient", "UserClient")
                        .WithMany("FcmTokens")
                        .HasForeignKey("UserClientId");
                });

            modelBuilder.Entity("AgenciappHome.Models.ApiModel.Invoice", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agenciapp.Domain.Models.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");

                    b.HasOne("AgenciappHome.Models.ApiModel.UserClient", "UserClient")
                        .WithMany("Invoices")
                        .HasForeignKey("UserClientId");
                });

            modelBuilder.Entity("AgenciappHome.Models.ApiModel.InvoiceProductoBodega", b =>
                {
                    b.HasOne("AgenciappHome.Models.ApiModel.Invoice", "Invoice")
                        .WithMany("InvoiceProductoBodega")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.ProductoBodega", "ProductoBodega")
                        .WithMany("InvoiceProductoBodega")
                        .HasForeignKey("ProductoBodegaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.ApiModel.UserClient", b =>
                {
                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("AgenciappHome.Models.AttachmentTicket", b =>
                {
                    b.HasOne("AgenciappHome.Models.Ticket", "Ticket")
                        .WithMany("Attachments")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("AgenciappHome.Models.Auxiliar.RecBancariaAgency", b =>
                {
                    b.HasOne("AgenciappHome.Models.CashAccountingBoxItem", "cashAccountingBoxItem")
                        .WithMany("recBancariaAgencies")
                        .HasForeignKey("cashAccountingBoxItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.AuxReserva", b =>
                {
                    b.HasOne("AgenciappHome.Models.Rentadora", "Rentadora")
                        .WithMany("Autos")
                        .HasForeignKey("RentadoraId");
                });

            modelBuilder.Entity("AgenciappHome.Models.Bag", b =>
                {
                    b.HasOne("AgenciappHome.Models.Order", "Order")
                        .WithMany("Bag")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("AgenciappHome.Models.BagItem", b =>
                {
                    b.HasOne("AgenciappHome.Models.Bag", "Bag")
                        .WithMany("BagItems")
                        .HasForeignKey("BagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Product", "Product")
                        .WithOne("BagItem")
                        .HasForeignKey("AgenciappHome.Models.BagItem", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Bodega", b =>
                {
                    b.HasOne("AgenciappHome.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId");
                });

            modelBuilder.Entity("AgenciappHome.Models.BodegaProducto", b =>
                {
                    b.HasOne("AgenciappHome.Models.Bodega", "Bodega")
                        .WithMany()
                        .HasForeignKey("BodegaId");

                    b.HasOne("AgenciappHome.Models.ProductoBodega", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.BoxHistory", b =>
                {
                    b.HasOne("AgenciappHome.Models.CashBox", "CashBox")
                        .WithMany("BoxHistories")
                        .HasForeignKey("CashBoxId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Carrier", b =>
                {
                    b.HasOne("AgenciappHome.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithOne()
                        .HasForeignKey("AgenciappHome.Models.Carrier", "ClientId");
                });

            modelBuilder.Entity("AgenciappHome.Models.CashAccountingBoxItem", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.CashBox", "CashBox")
                        .WithMany("cashAccountingBoxItems")
                        .HasForeignKey("CashBoxId");
                });

            modelBuilder.Entity("AgenciappHome.Models.CashAdjustment", b =>
                {
                    b.HasOne("AgenciappHome.Models.CashAccountingBoxItem", "cashAccountingBoxItem")
                        .WithMany("CashAdjustments")
                        .HasForeignKey("cashAccountingBoxItemId");
                });

            modelBuilder.Entity("AgenciappHome.Models.CashBox", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Ciudad", b =>
                {
                    b.HasOne("AgenciappHome.Models.Estado", "Estado")
                        .WithMany("Ciudades")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Client", b =>
                {
                    b.HasOne("AgenciappHome.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany("Client")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("RefAgency8");

                    b.HasOne("AgenciappHome.Models.Phone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneId");

                    b.OwnsOne("Agenciapp.Domain.Models.ValueObject.ClientDocument", "OtherDocument", b1 =>
                        {
                            b1.Property<Guid>("ClientId");

                            b1.Property<DateTime?>("ExpiryDate");

                            b1.Property<string>("Number");

                            b1.Property<string>("Type");

                            b1.ToTable("Client");

                            b1.HasOne("AgenciappHome.Models.Client")
                                .WithOne("OtherDocument")
                                .HasForeignKey("Agenciapp.Domain.Models.ValueObject.ClientDocument", "ClientId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Agenciapp.Domain.Models.ValueObject.ClientPassport", "Passport", b1 =>
                        {
                            b1.Property<Guid>("ClientId");

                            b1.Property<DateTime>("DateNotify");

                            b1.Property<DateTime>("ExpireDate");

                            b1.Property<string>("Number");

                            b1.ToTable("Client");

                            b1.HasOne("AgenciappHome.Models.Client")
                                .WithOne("Passport")
                                .HasForeignKey("Agenciapp.Domain.Models.ValueObject.ClientPassport", "ClientId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("AgenciappHome.Models.ClientContact", b =>
                {
                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Contact", b =>
                {
                    b.HasOne("AgenciappHome.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("AgenciappHome.Models.Phone", "Phone1")
                        .WithMany()
                        .HasForeignKey("Phone1PhoneId");

                    b.HasOne("AgenciappHome.Models.Phone", "Phone2")
                        .WithMany()
                        .HasForeignKey("Phone2PhoneId");
                });

            modelBuilder.Entity("AgenciappHome.Models.CostByProvince", b =>
                {
                    b.HasOne("AgenciappHome.Models.Provincia", "Provincia")
                        .WithMany()
                        .HasForeignKey("ProvinciaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Wholesaler", "Wholesaler")
                        .WithMany("CostByProvinces")
                        .HasForeignKey("WholesalerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.CostoCubiq", b =>
                {
                    b.HasOne("AgenciappHome.Models.Zona", "Zona")
                        .WithMany()
                        .HasForeignKey("ZonaId");
                });

            modelBuilder.Entity("AgenciappHome.Models.Cotizador", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Credito", b =>
                {
                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany("Creditos")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Cuenta", b =>
                {
                    b.HasOne("AgenciappHome.Models.TipoCuenta", "TipoCuenta")
                        .WithMany()
                        .HasForeignKey("IdTipoCuenta")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.CuentaBancaria", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany("CuentasBancarias")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.EnvioCaribe", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Agency", "AgencyTransferida")
                        .WithMany()
                        .HasForeignKey("AgencyTransferidaId");

                    b.HasOne("AgenciappHome.Models.AuthorizationCard", "AuthorizationCard")
                        .WithMany()
                        .HasForeignKey("AuthorizationCardId");

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Wholesaler", "Wholesaler")
                        .WithMany()
                        .HasForeignKey("WholesalerId");

                    b.HasOne("AgenciappHome.Models.OrderRevisada", "firmaCliente")
                        .WithMany()
                        .HasForeignKey("firmaClienteId");
                });

            modelBuilder.Entity("AgenciappHome.Models.EnvioCaribeValorAduanal", b =>
                {
                    b.HasOne("AgenciappHome.Models.EnvioCaribe", "EnvioCaribe")
                        .WithMany("EnvioCaribeValorAduanals")
                        .HasForeignKey("EnvioCaribeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.ValorAduanal", "ValorAduanal")
                        .WithMany("EnvioCaribeValorAduanals")
                        .HasForeignKey("ValorAduanalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.EnvioMaritimo", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("AgenciappHome.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.TipoPago", "TipoPago")
                        .WithMany()
                        .HasForeignKey("TipoPagoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Agency", "agencyTransferida")
                        .WithMany()
                        .HasForeignKey("agenciaId");

                    b.HasOne("AgenciappHome.Models.AuthorizationCard", "authorizationCard")
                        .WithMany()
                        .HasForeignKey("authorizationCardId");

                    b.HasOne("AgenciappHome.Models.Wholesaler", "despachadaA")
                        .WithMany()
                        .HasForeignKey("despachadaAIdWholesaler");

                    b.HasOne("AgenciappHome.Models.OrderRevisada", "firmaCliente")
                        .WithMany()
                        .HasForeignKey("firmaClienteId");

                    b.HasOne("AgenciappHome.Models.Wholesaler", "wholesaler")
                        .WithMany()
                        .HasForeignKey("wholesalerIdWholesaler");
                });

            modelBuilder.Entity("AgenciappHome.Models.Event", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.formBuilder", b =>
                {
                    b.HasOne("AgenciappHome.Models.Office", "Office")
                        .WithMany("formBuilder")
                        .HasForeignKey("OfficeId");
                });

            modelBuilder.Entity("AgenciappHome.Models.GuiaAerea", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");
                });

            modelBuilder.Entity("AgenciappHome.Models.GuiaPasaporte", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AgenciappHome.Models.Habitaciones", b =>
                {
                    b.HasOne("AgenciappHome.Models.Ticket")
                        .WithMany("Habitaciones")
                        .HasForeignKey("TicketId");

                    b.HasOne("AgenciappHome.Models.TipoHabitacion", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId");
                });

            modelBuilder.Entity("AgenciappHome.Models.Hotel", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Wholesaler", "Mayorista")
                        .WithMany()
                        .HasForeignKey("MayoristaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AgenciappHome.Models.ImageClient", b =>
                {
                    b.HasOne("AgenciappHome.Models.Client")
                        .WithMany("ImageClients")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("AgenciappHome.Models.ImagenPromotion", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Log", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("AgenciappHome.Models.EnvioCaribe", "EnvioCaribe")
                        .WithMany()
                        .HasForeignKey("EnvioCaribeId");

                    b.HasOne("AgenciappHome.Models.EnvioMaritimo", "EnvioMaritimo")
                        .WithMany()
                        .HasForeignKey("EnvioMaritimoId");

                    b.HasOne("AgenciappHome.Models.ApiModel.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.HasOne("AgenciappHome.Models.OrderCubiq", "OrderCubic")
                        .WithMany()
                        .HasForeignKey("OrderCubicOrderCubiqId");

                    b.HasOne("AgenciappHome.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("AgenciappHome.Models.PaqueteTuristico", "PaqueteTuristico")
                        .WithMany()
                        .HasForeignKey("PaqueteTuristicoPaqueteId");

                    b.HasOne("AgenciappHome.Models.Passport", "Passport")
                        .WithMany()
                        .HasForeignKey("PassportId");

                    b.HasOne("AgenciappHome.Models.Rechargue", "Rechargue")
                        .WithMany()
                        .HasForeignKey("RechargueId");

                    b.HasOne("AgenciappHome.Models.Remittance", "Remittance")
                        .WithMany()
                        .HasForeignKey("RemittanceId");

                    b.HasOne("AgenciappHome.Models.Ticket", "Reserva")
                        .WithMany("Logs")
                        .HasForeignKey("ReservaTicketId");

                    b.HasOne("AgenciappHome.Models.Servicio", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId");

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AgenciappHome.Models.ManifiestoPasaporte", b =>
                {
                    b.HasOne("AgenciappHome.Models.GuiaPasaporte", "GuiaPasaporte")
                        .WithMany("ManifiestosPasaporte")
                        .HasForeignKey("GuiaPasaporteGuiaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Mercado", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.AuthorizationCard", "AuthorizationCard")
                        .WithMany()
                        .HasForeignKey("AuthorizationCardId");

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.OrderRevisada", "OrderRevisada")
                        .WithMany()
                        .HasForeignKey("OrderRevisadaId");

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AgenciappHome.Models.Minorista", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.MinoristaOtrosServ", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.MinoristaPasaporte", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.ModuloAsignado", b =>
                {
                    b.HasOne("AgenciappHome.Models.CostoxModuloMayorista", "costoxModulo")
                        .WithMany("modAsignados")
                        .HasForeignKey("costoxModuloCostosxModuloId");
                });

            modelBuilder.Entity("AgenciappHome.Models.Movimiento", b =>
                {
                    b.HasOne("AgenciappHome.Models.Bodega", "BodegaDestino")
                        .WithMany()
                        .HasForeignKey("IdBodegaDestino");

                    b.HasOne("AgenciappHome.Models.Bodega", "BodegaOrigen")
                        .WithMany()
                        .HasForeignKey("IdBodegaOrigen");

                    b.HasOne("AgenciappHome.Models.EstadoMovimiento", "EstadoMovimiento")
                        .WithMany()
                        .HasForeignKey("IdEstadoMovimiento");

                    b.HasOne("AgenciappHome.Models.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("IdTipoDocumento");

                    b.HasOne("AgenciappHome.Models.TipoMovimiento", "TipoMovimiento")
                        .WithMany()
                        .HasForeignKey("IdTipoMovimiento")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Wholesaler", "Proveedor")
                        .WithMany("movimientos")
                        .HasForeignKey("ProveedorIdWholesaler");
                });

            modelBuilder.Entity("AgenciappHome.Models.MovimientoProducto", b =>
                {
                    b.HasOne("AgenciappHome.Models.Movimiento", "Movimiento")
                        .WithMany()
                        .HasForeignKey("IdMovimiento")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.ProductoBodega", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Municipio", b =>
                {
                    b.HasOne("AgenciappHome.Models.Provincia", "provincia")
                        .WithMany("municipios")
                        .HasForeignKey("provinciaId");
                });

            modelBuilder.Entity("AgenciappHome.Models.NotificationByAgency", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Office", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany("Office")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("RefAgency9");
                });

            modelBuilder.Entity("AgenciappHome.Models.Order", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany("Order")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("RefAgency17");

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany("Order")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("RefClient18");

                    b.HasOne("AgenciappHome.Models.Contact", "Contact")
                        .WithMany("Order")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_Order_Contact");

                    b.HasOne("Agenciapp.Domain.Models.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");

                    b.HasOne("AgenciappHome.Models.User", "Distributor")
                        .WithMany()
                        .HasForeignKey("DistributorId");

                    b.HasOne("AgenciappHome.Models.ApiModel.Invoice", "Invoice")
                        .WithMany("Orders")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("AgenciappHome.Models.Minorista", "Minorista")
                        .WithMany()
                        .HasForeignKey("MinoristaId");

                    b.HasOne("AgenciappHome.Models.Office", "Office")
                        .WithMany("Order")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("RefOffice19");

                    b.HasOne("AgenciappHome.Models.Office", "OfficeTransferida")
                        .WithMany()
                        .HasForeignKey("OfficeTransferidaOfficeId");

                    b.HasOne("AgenciappHome.Models.User", "PrincipalDistributor")
                        .WithMany()
                        .HasForeignKey("PrincipalDistributorId");

                    b.HasOne("AgenciappHome.Models.User", "Repartidor")
                        .WithMany()
                        .HasForeignKey("RepartidorId");

                    b.HasOne("AgenciappHome.Models.TipoPago", "TipoPago")
                        .WithMany("Order")
                        .HasForeignKey("TipoPagoId")
                        .HasConstraintName("FK_Order_TipoPago");

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany("Order")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Order_User");

                    b.HasOne("AgenciappHome.Models.Agency", "agencyTransferida")
                        .WithMany()
                        .HasForeignKey("agencyTransferidaAgencyId");

                    b.HasOne("AgenciappHome.Models.AuthorizationCard", "authorizationCard")
                        .WithMany()
                        .HasForeignKey("authorizationCardId");

                    b.HasOne("AgenciappHome.Models.Wholesaler", "despachadaA")
                        .WithMany()
                        .HasForeignKey("despachadaAIdWholesaler");

                    b.HasOne("AgenciappHome.Models.OrderRevisada", "orderEntregada")
                        .WithMany()
                        .HasForeignKey("orderEntregadaId");

                    b.HasOne("AgenciappHome.Models.OrderRevisada", "orderRevisada")
                        .WithMany()
                        .HasForeignKey("orderRevisadaId");

                    b.HasOne("AgenciappHome.Models.Shipping", "shipping")
                        .WithMany()
                        .HasForeignKey("shippingPackingId");

                    b.HasOne("AgenciappHome.Models.Wholesaler", "wholesaler")
                        .WithMany()
                        .HasForeignKey("wholesalerIdWholesaler");
                });

            modelBuilder.Entity("AgenciappHome.Models.OrderCubiq", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AgenciappHome.Models.AuthorizationCard", "AuthorizationCard")
                        .WithMany()
                        .HasForeignKey("AuthorizationCardId");

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("AgenciappHome.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Agenciapp.Domain.Models.ContainerGuiaCubiq", "Container")
                        .WithMany("Packages")
                        .HasForeignKey("ContainerId");

                    b.HasOne("AgenciappHome.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("AgenciappHome.Models.PuntoEntrega", "PuntoEntrega")
                        .WithMany()
                        .HasForeignKey("PuntoEntregaId");

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("AgenciappHome.Models.Zona", "Zona")
                        .WithMany()
                        .HasForeignKey("ZonaId");

                    b.HasOne("AgenciappHome.Models.Agency", "agencyTransferida")
                        .WithMany()
                        .HasForeignKey("agencyTransferidaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AgenciappHome.Models.OrderRevisada", "orderEntregada")
                        .WithMany()
                        .HasForeignKey("orderEntregadaId");

                    b.HasOne("AgenciappHome.Models.OrderRevisada", "orderRevisada")
                        .WithMany()
                        .HasForeignKey("orderRevisadaId");

                    b.HasOne("AgenciappHome.Models.Wholesaler", "wholesaler")
                        .WithMany()
                        .HasForeignKey("wholesalerIdWholesaler");

                    b.OwnsOne("Agenciapp.Domain.Models.ValueObject.HandlingAndTransportation", "HandlingAndTransportation", b1 =>
                        {
                            b1.Property<Guid>("OrderCubiqId");

                            b1.Property<decimal>("Cost");

                            b1.Property<decimal>("CostCubiq");

                            b1.Property<decimal>("Sale");

                            b1.ToTable("OrderCubiqs");

                            b1.HasOne("AgenciappHome.Models.OrderCubiq")
                                .WithOne("HandlingAndTransportation")
                                .HasForeignKey("Agenciapp.Domain.Models.ValueObject.HandlingAndTransportation", "OrderCubiqId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("AgenciappHome.Models.Package", b =>
                {
                    b.HasOne("AgenciappHome.Models.Order", "PackageNavigation")
                        .WithOne("Package")
                        .HasForeignKey("AgenciappHome.Models.Package", "PackageId")
                        .HasConstraintName("RefOrder20");
                });

            modelBuilder.Entity("AgenciappHome.Models.PackageItem", b =>
                {
                    b.HasOne("AgenciappHome.Models.Package", "Package")
                        .WithMany("PackageItem")
                        .HasForeignKey("PackageId")
                        .HasConstraintName("RefPackage1");

                    b.HasOne("AgenciappHome.Models.Product", "Product")
                        .WithMany("PackageItem")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("RefProduct2");
                });

            modelBuilder.Entity("AgenciappHome.Models.Pago", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.TipoPago", "TipoPago")
                        .WithMany()
                        .HasForeignKey("TipoPagoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.PagoEnvioMaritimo", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("AgenciappHome.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.TipoPago", "TipoPago")
                        .WithMany()
                        .HasForeignKey("TipoPagoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.EnvioMaritimo", "envio")
                        .WithMany()
                        .HasForeignKey("envioId");
                });

            modelBuilder.Entity("AgenciappHome.Models.Paquete", b =>
                {
                    b.HasOne("AgenciappHome.Models.GuiaAerea")
                        .WithMany("Paquetes")
                        .HasForeignKey("GuiaAereaId");

                    b.HasOne("AgenciappHome.Models.OrderCubiq", "OrderCubiq")
                        .WithMany("Paquetes")
                        .HasForeignKey("OrderCubiqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.PaqueteEnvCaribe", b =>
                {
                    b.HasOne("AgenciappHome.Models.EnvioCaribe", "EnvioCaribe")
                        .WithMany("paquetes")
                        .HasForeignKey("EnvioCaribeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.PaqueteTuristico", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("AgenciappHome.Models.OrderRevisada", "FirmaCliente")
                        .WithMany()
                        .HasForeignKey("FirmaClienteId");

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Pasajero", b =>
                {
                    b.HasOne("AgenciappHome.Models.DocumentPassenger", "ForArrivalDoc")
                        .WithMany()
                        .HasForeignKey("ForArrivalDocId");

                    b.HasOne("AgenciappHome.Models.Ticket", "Ticket")
                        .WithMany("Pasajeros")
                        .HasForeignKey("TicketId");

                    b.HasOne("AgenciappHome.Models.DocumentPassenger", "UsaArrivalDoc")
                        .WithMany()
                        .HasForeignKey("UsaArrivalDocId");
                });

            modelBuilder.Entity("AgenciappHome.Models.Passport", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Agency", "AgencyTransferida")
                        .WithMany()
                        .HasForeignKey("AgencyTransferidaId");

                    b.HasOne("AgenciappHome.Models.AuthorizationCard", "AuthorizationCard")
                        .WithMany()
                        .HasForeignKey("AuthorizationCardId");

                    b.HasOne("Agenciapp.Domain.Models.ChequeOtorgamiento", "ChequeOtorgamiento")
                        .WithOne("Passport")
                        .HasForeignKey("AgenciappHome.Models.Passport", "ChequeOtorgamientoId");

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.OrderRevisada", "FirmaCliente")
                        .WithMany()
                        .HasForeignKey("FirmaClienteId");

                    b.HasOne("AgenciappHome.Models.ManifiestoPasaporte", "ManifiestoPasaporte")
                        .WithMany("Passports")
                        .HasForeignKey("ManifiestoPasaporteId");

                    b.HasOne("AgenciappHome.Models.MinoristaPasaporte", "Minorista")
                        .WithMany()
                        .HasForeignKey("MinoristaId");

                    b.HasOne("AgenciappHome.Models.PassportExpress", "PassportExpress")
                        .WithMany()
                        .HasForeignKey("PassportExpressId");

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Wholesaler", "WholeslerDespacho")
                        .WithMany()
                        .HasForeignKey("WholesalerDespachoId");

                    b.HasOne("AgenciappHome.Models.Wholesaler", "Wholesaler")
                        .WithMany()
                        .HasForeignKey("WholesalerId");
                });

            modelBuilder.Entity("AgenciappHome.Models.PaymentCard", b =>
                {
                    b.HasOne("AgenciappHome.Models.ApiModel.UserClient", "UserClient")
                        .WithMany("PaymentCards")
                        .HasForeignKey("UserClientId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("AgenciappHome.Models.PaymentTicket", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("AgenciappHome.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AgenciappHome.Models.PreciosAutos", b =>
                {
                    b.HasOne("AgenciappHome.Models.Rentadora", "Rentadora")
                        .WithMany()
                        .HasForeignKey("RentadoraId");
                });

            modelBuilder.Entity("AgenciappHome.Models.PriceProductByprovince", b =>
                {
                    b.HasOne("AgenciappHome.Models.PrecioRefMinorista")
                        .WithMany("PriceByProvince")
                        .HasForeignKey("PrecioRefMinoristaId");

                    b.HasOne("AgenciappHome.Models.Provincia", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.SettingMinoristaProduct")
                        .WithMany("PriceByProvince")
                        .HasForeignKey("SettingMinoristaProductId");
                });

            modelBuilder.Entity("AgenciappHome.Models.Product", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany("Product")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("RefAgency12");

                    b.HasOne("AgenciappHome.Models.ProductoBodega", "ProductoBodega")
                        .WithMany("Products")
                        .HasForeignKey("ProductoBodegaIdProducto");

                    b.HasOne("AgenciappHome.Models.Wholesaler", "Wholesaler")
                        .WithMany()
                        .HasForeignKey("WholesalerIdWholesaler");
                });

            modelBuilder.Entity("AgenciappHome.Models.ProductEM", b =>
                {
                    b.HasOne("AgenciappHome.Models.EnvioMaritimo")
                        .WithMany("products")
                        .HasForeignKey("EnvioMaritimoId");

                    b.HasOne("AgenciappHome.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.ProductoBodega", b =>
                {
                    b.HasOne("AgenciappHome.Models.CategoriaBodega", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.UnidadMedida", "UnidadMedida")
                        .WithMany()
                        .HasForeignKey("IdUnidadMedida")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.PrecioRefMinorista", "Precio1Minorista")
                        .WithMany()
                        .HasForeignKey("Precio1MinoristaId");

                    b.HasOne("AgenciappHome.Models.PrecioRefMinorista", "Precio2Minorista")
                        .WithMany()
                        .HasForeignKey("Precio2MinoristaId");

                    b.HasOne("AgenciappHome.Models.PrecioRefMinorista", "Precio3Minorista")
                        .WithMany()
                        .HasForeignKey("Precio3MinoristaId");

                    b.HasOne("AgenciappHome.Models.Wholesaler", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorIdWholesaler");
                });

            modelBuilder.Entity("AgenciappHome.Models.ProductoBodegaCatalogItem", b =>
                {
                    b.HasOne("RapidMultiservice.Models.Responses.CatalogItem", "CatalogItem")
                        .WithMany("productoBodegaCatalogItems")
                        .HasForeignKey("CatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.ProductoBodega", "ProductoBodega")
                        .WithMany("productoBodegaCatalogItems")
                        .HasForeignKey("ProductoBodegaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.ProductosVendidos", b =>
                {
                    b.HasOne("AgenciappHome.Models.Mercado")
                        .WithMany("Productos")
                        .HasForeignKey("MercadoId");

                    b.HasOne("AgenciappHome.Models.ProductoBodega", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Provincia", b =>
                {
                    b.HasOne("AgenciappHome.Models.PuntoEntrega", "PuntoEntrega")
                        .WithMany()
                        .HasForeignKey("PuntoEntregaId");

                    b.HasOne("AgenciappHome.Models.Zona", "Zona")
                        .WithMany("Provincias")
                        .HasForeignKey("ZonaId");
                });

            modelBuilder.Entity("AgenciappHome.Models.Rechargue", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.AuthorizationCard", "AuthorizationCard")
                        .WithMany()
                        .HasForeignKey("AuthorizationCardId");

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.OrderRevisada", "FirmaCliente")
                        .WithMany()
                        .HasForeignKey("FirmaClienteId");

                    b.HasOne("AgenciappHome.Models.TipoPago", "tipoPago")
                        .WithMany()
                        .HasForeignKey("TipoPagoId");

                    b.HasOne("AgenciappHome.Models.TipoRecarga", "tipoRecarga")
                        .WithMany()
                        .HasForeignKey("TipoRecargaId");

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("AgenciappHome.Models.Wholesaler", "wholesaler")
                        .WithMany()
                        .HasForeignKey("wholesalerIdWholesaler");
                });

            modelBuilder.Entity("AgenciappHome.Models.Reclamo", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.User", "Asignado")
                        .WithMany()
                        .HasForeignKey("AsignadoId");

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.ReclamoTicket", b =>
                {
                    b.HasOne("AgenciappHome.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("AgenciappHome.Models.Reclamo", "Reclamo")
                        .WithMany("ReclamoTickets")
                        .HasForeignKey("ReclamoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.RefundLog", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.EnvioCaribe", "EnvioCaribe")
                        .WithMany()
                        .HasForeignKey("EnvioCaribeId");

                    b.HasOne("AgenciappHome.Models.EnvioMaritimo", "EnvioMaritimo")
                        .WithMany()
                        .HasForeignKey("EnvioMaritimoId");

                    b.HasOne("AgenciappHome.Models.OrderCubiq", "OrderCubiq")
                        .WithMany()
                        .HasForeignKey("OrderCubiqId");

                    b.HasOne("AgenciappHome.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("AgenciappHome.Models.PaqueteTuristico", "PaqueteTuristico")
                        .WithMany()
                        .HasForeignKey("PaqueteTuristicoId");

                    b.HasOne("AgenciappHome.Models.Passport", "Passport")
                        .WithMany()
                        .HasForeignKey("PassportId");

                    b.HasOne("AgenciappHome.Models.Rechargue", "Rechargue")
                        .WithMany()
                        .HasForeignKey("RechargueId");

                    b.HasOne("AgenciappHome.Models.Remittance", "Remesa")
                        .WithMany()
                        .HasForeignKey("RemesaId");

                    b.HasOne("AgenciappHome.Models.Servicio", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId");

                    b.HasOne("AgenciappHome.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.RegistroEstado", b =>
                {
                    b.HasOne("AgenciappHome.Models.EnvioCaribe", "EnvioCaribe")
                        .WithMany("RegistroEstados")
                        .HasForeignKey("EnvioCaribeId");

                    b.HasOne("AgenciappHome.Models.EnvioMaritimo", "EnvioMaritimo")
                        .WithMany("RegistroEstados")
                        .HasForeignKey("EnvioMaritimoId");

                    b.HasOne("AgenciappHome.Models.Mercado")
                        .WithMany("RegistroEstados")
                        .HasForeignKey("MercadoId");

                    b.HasOne("AgenciappHome.Models.OrderCubiq", "OrderCubiq")
                        .WithMany("RegistroEstados")
                        .HasForeignKey("OrderCubiqId");

                    b.HasOne("AgenciappHome.Models.Order", "Order")
                        .WithMany("RegistroEstados")
                        .HasForeignKey("OrderId");

                    b.HasOne("AgenciappHome.Models.PaqueteTuristico", "PaqueteTuristico")
                        .WithMany("RegistroEstados")
                        .HasForeignKey("PaqueteTuristicoPaqueteId");

                    b.HasOne("AgenciappHome.Models.Passport")
                        .WithMany("RegistroEstados")
                        .HasForeignKey("PassportId");

                    b.HasOne("AgenciappHome.Models.Rechargue", "Rechargue")
                        .WithMany("RegistroEstados")
                        .HasForeignKey("RechargueId");

                    b.HasOne("AgenciappHome.Models.Remittance", "Remittance")
                        .WithMany("RegistroEstados")
                        .HasForeignKey("RemittanceId");

                    b.HasOne("AgenciappHome.Models.Servicio", "Servicio")
                        .WithMany("RegistroEstados")
                        .HasForeignKey("ServicioId");

                    b.HasOne("AgenciappHome.Models.Ticket", "Ticket")
                        .WithMany("RegistroEstados")
                        .HasForeignKey("TicketId");

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.RegistroPago", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.AuthorizationCard", "AuthorizationCard")
                        .WithMany()
                        .HasForeignKey("AuthorizationCardId");

                    b.HasOne("AgenciappHome.Models.Bill", "Bill")
                        .WithMany("RegistroPagos")
                        .HasForeignKey("BillId");

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany("RegistroPagos")
                        .HasForeignKey("ClientId");

                    b.HasOne("AgenciappHome.Models.CuentaBancaria", "CuentaBancaria")
                        .WithMany("registroPagos")
                        .HasForeignKey("CuentaBancariaId");

                    b.HasOne("AgenciappHome.Models.EnvioCaribe", "EnvioCaribe")
                        .WithMany("RegistroPagos")
                        .HasForeignKey("EnvioCaribeId");

                    b.HasOne("AgenciappHome.Models.EnvioMaritimo", "EnvioMaritimo")
                        .WithMany("RegistroPagos")
                        .HasForeignKey("EnvioMaritimoId");

                    b.HasOne("AgenciappHome.Models.Factura", "Factura")
                        .WithMany("RegistroPagos")
                        .HasForeignKey("FacturaId");

                    b.HasOne("AgenciappHome.Models.Mercado", "Mercado")
                        .WithMany("RegistroPagos")
                        .HasForeignKey("MercadoId");

                    b.HasOne("AgenciappHome.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.OrderCubiq", "OrderCubiq")
                        .WithMany("RegistroPagos")
                        .HasForeignKey("OrderCubiqId");

                    b.HasOne("AgenciappHome.Models.Order", "Order")
                        .WithMany("Pagos")
                        .HasForeignKey("OrderId");

                    b.HasOne("AgenciappHome.Models.PaqueteTuristico", "PaqueteTuristico")
                        .WithMany("Pagos")
                        .HasForeignKey("PaqueteTuristicoId");

                    b.HasOne("AgenciappHome.Models.Passport", "Passport")
                        .WithMany("RegistroPagos")
                        .HasForeignKey("PassportId");

                    b.HasOne("AgenciappHome.Models.Rechargue", "Rechargue")
                        .WithMany("RegistroPagos")
                        .HasForeignKey("RechargueId");

                    b.HasOne("AgenciappHome.Models.Remittance", "Remittance")
                        .WithMany("Pagos")
                        .HasForeignKey("RemittanceId");

                    b.HasOne("AgenciappHome.Models.Servicio", "Servicio")
                        .WithMany("RegistroPagos")
                        .HasForeignKey("ServicioId");

                    b.HasOne("AgenciappHome.Models.Ticket", "Ticket")
                        .WithMany("RegistroPagos")
                        .HasForeignKey("TicketId");

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.ZelleItem", "ZelleItem")
                        .WithMany()
                        .HasForeignKey("ZelleItemId");

                    b.HasOne("AgenciappHome.Models.TipoPago", "tipoPago")
                        .WithMany()
                        .HasForeignKey("tipoPagoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.RegistroPagosToday", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.AuthorizationCard", "AuthorizationCard")
                        .WithMany()
                        .HasForeignKey("AuthorizationCardId");

                    b.HasOne("AgenciappHome.Models.Bill", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId");

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("AgenciappHome.Models.CuentaBancaria", "CuentaBancaria")
                        .WithMany()
                        .HasForeignKey("CuentaBancariaId");

                    b.HasOne("AgenciappHome.Models.EnvioCaribe", "EnvioCaribe")
                        .WithMany()
                        .HasForeignKey("EnvioCaribeId");

                    b.HasOne("AgenciappHome.Models.EnvioMaritimo", "EnvioMaritimo")
                        .WithMany()
                        .HasForeignKey("EnvioMaritimoId");

                    b.HasOne("AgenciappHome.Models.Factura", "Factura")
                        .WithMany()
                        .HasForeignKey("FacturaId");

                    b.HasOne("AgenciappHome.Models.Mercado", "Mercado")
                        .WithMany()
                        .HasForeignKey("MercadoId");

                    b.HasOne("AgenciappHome.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.OrderCubiq", "OrderCubiq")
                        .WithMany()
                        .HasForeignKey("OrderCubiqId");

                    b.HasOne("AgenciappHome.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("AgenciappHome.Models.PaqueteTuristico", "PaqueteTuristico")
                        .WithMany()
                        .HasForeignKey("PaqueteTuristicoId");

                    b.HasOne("AgenciappHome.Models.Passport", "Passport")
                        .WithMany()
                        .HasForeignKey("PassportId");

                    b.HasOne("AgenciappHome.Models.Rechargue", "Rechargue")
                        .WithMany()
                        .HasForeignKey("RechargueId");

                    b.HasOne("AgenciappHome.Models.Remittance", "Remittance")
                        .WithMany()
                        .HasForeignKey("RemittanceId");

                    b.HasOne("AgenciappHome.Models.Servicio", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId");

                    b.HasOne("AgenciappHome.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.ZelleItem", "ZelleItem")
                        .WithMany()
                        .HasForeignKey("ZelleItemId");

                    b.HasOne("AgenciappHome.Models.TipoPago", "tipoPago")
                        .WithMany()
                        .HasForeignKey("tipoPagoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Remittance", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Agency", "agencyTransferida")
                        .WithMany()
                        .HasForeignKey("AgencyTransferidaId");

                    b.HasOne("AgenciappHome.Models.CardRemittance", "CardRemittance")
                        .WithMany()
                        .HasForeignKey("CardRemittanceId");

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.AuthorizationCard", "authorizationCard")
                        .WithMany()
                        .HasForeignKey("authorizationCardId");

                    b.HasOne("AgenciappHome.Models.Wholesaler", "despachadaA")
                        .WithMany()
                        .HasForeignKey("despachadaAIdWholesaler");

                    b.HasOne("AgenciappHome.Models.OrderRevisada", "orderEntregada")
                        .WithMany()
                        .HasForeignKey("orderEntregadaId");

                    b.HasOne("AgenciappHome.Models.OrderRevisada", "orderRevisada")
                        .WithMany()
                        .HasForeignKey("orderRevisadaId");

                    b.HasOne("AgenciappHome.Models.Wholesaler", "wholesaler")
                        .WithMany()
                        .HasForeignKey("wholesalerIdWholesaler");
                });

            modelBuilder.Entity("AgenciappHome.Models.Rentadora", b =>
                {
                    b.HasOne("AgenciappHome.Models.Wholesaler", "Wholesaler")
                        .WithMany()
                        .HasForeignKey("WholesalerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.ResponseForm", b =>
                {
                    b.HasOne("AgenciappHome.Models.formBuilder", "formBuilder")
                        .WithMany("responseForms")
                        .HasForeignKey("formBuilderId");
                });

            modelBuilder.Entity("AgenciappHome.Models.ServConsularMayorista", b =>
                {
                    b.HasOne("AgenciappHome.Models.Wholesaler", "Wholesaler")
                        .WithMany("ServConsularMayoristas")
                        .HasForeignKey("WholesalerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Servicio", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("AgenciappHome.Models.AuthorizationCard", "AuthorizationCard")
                        .WithMany()
                        .HasForeignKey("AuthorizationCardId");

                    b.HasOne("AgenciappHome.Models.OrderRevisada", "FirmaCliente")
                        .WithMany()
                        .HasForeignKey("FirmaClienteId");

                    b.HasOne("Agenciapp.Domain.Models.MinorAuthorization", "MinorAuthorization")
                        .WithMany()
                        .HasForeignKey("MinorAuthorizationId");

                    b.HasOne("AgenciappHome.Models.MinoristaOtrosServ", "Minorista")
                        .WithMany()
                        .HasForeignKey("MinoristaId");

                    b.HasOne("AgenciappHome.Models.Office", "office")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("AgenciappHome.Models.PaqueteTuristico", "PaqueteTuristico")
                        .WithMany("Servicios")
                        .HasForeignKey("PaqueteTuristicoId");

                    b.HasOne("AgenciappHome.Models.SubServicio", "SubServicio")
                        .WithMany()
                        .HasForeignKey("SubServicioId");

                    b.HasOne("AgenciappHome.Models.TipoPago", "tipoPago")
                        .WithMany()
                        .HasForeignKey("TipoPagoId");

                    b.HasOne("AgenciappHome.Models.TipoServicio", "tipoServicio")
                        .WithMany()
                        .HasForeignKey("TipoServicioId");

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("AgenciappHome.Models.Client", "cliente")
                        .WithMany()
                        .HasForeignKey("clienteClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Wholesaler", "despachadaA")
                        .WithMany()
                        .HasForeignKey("despachadaAIdWholesaler");

                    b.HasOne("AgenciappHome.Models.Wholesaler", "mayorista")
                        .WithMany()
                        .HasForeignKey("mayoristaIdWholesaler");
                });

            modelBuilder.Entity("AgenciappHome.Models.ServiciosxPagar", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("AgenciappHome.Models.Bill", "Bill")
                        .WithMany("ServiciosxPagar")
                        .HasForeignKey("BillId");

                    b.HasOne("AgenciappHome.Models.Cotizador", "Cotizador")
                        .WithMany("ServicesByPay")
                        .HasForeignKey("CotizadorId");

                    b.HasOne("AgenciappHome.Models.EnvioCaribe", "EnvioCaribe")
                        .WithMany()
                        .HasForeignKey("EnvioCaribeId");

                    b.HasOne("AgenciappHome.Models.EnvioMaritimo", "EnvioMaritimo")
                        .WithMany()
                        .HasForeignKey("EnvioMaritimoId");

                    b.HasOne("AgenciappHome.Models.ApiModel.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.HasOne("AgenciappHome.Models.Wholesaler", "Mayorista")
                        .WithMany()
                        .HasForeignKey("MayoristaIdWholesaler");

                    b.HasOne("AgenciappHome.Models.OrderCubiq", "OrderCubic")
                        .WithMany()
                        .HasForeignKey("OrderCubicOrderCubiqId");

                    b.HasOne("AgenciappHome.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("AgenciappHome.Models.Passport", "Passport")
                        .WithMany()
                        .HasForeignKey("PassportId");

                    b.HasOne("AgenciappHome.Models.Rechargue", "Rechargue")
                        .WithMany()
                        .HasForeignKey("RechargueId");

                    b.HasOne("AgenciappHome.Models.Remittance", "Remittance")
                        .WithMany()
                        .HasForeignKey("RemittanceId");

                    b.HasOne("AgenciappHome.Models.Ticket", "Reserva")
                        .WithMany()
                        .HasForeignKey("ReservaTicketId");

                    b.HasOne("AgenciappHome.Models.Servicio", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId");
                });

            modelBuilder.Entity("AgenciappHome.Models.servicioxCobrar", b =>
                {
                    b.HasOne("AgenciappHome.Models.Factura", "factura")
                        .WithMany("valoresTramites")
                        .HasForeignKey("FacturaId");

                    b.HasOne("AgenciappHome.Models.Minorista", "MinoristaTramite")
                        .WithMany()
                        .HasForeignKey("MinoristaTramiteId");

                    b.HasOne("AgenciappHome.Models.OrderCubiq", "OrderCubiq")
                        .WithMany()
                        .HasForeignKey("OrderCubiqId");

                    b.HasOne("AgenciappHome.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("AgenciappHome.Models.PaqueteTuristico", "PaqueteTuristico")
                        .WithMany()
                        .HasForeignKey("PaqueteTuristicoPaqueteId");

                    b.HasOne("AgenciappHome.Models.Passport", "Passport")
                        .WithMany()
                        .HasForeignKey("PassportId");

                    b.HasOne("AgenciappHome.Models.Client", "cliente")
                        .WithMany()
                        .HasForeignKey("clienteClientId");

                    b.HasOne("AgenciappHome.Models.Contact", "destinatario")
                        .WithMany()
                        .HasForeignKey("destinatarioContactId");

                    b.HasOne("AgenciappHome.Models.Agency", "mayorista")
                        .WithMany()
                        .HasForeignKey("mayoristaAgencyId");

                    b.HasOne("AgenciappHome.Models.Agency", "minorista")
                        .WithMany()
                        .HasForeignKey("minoristaAgencyId");

                    b.HasOne("AgenciappHome.Models.Client", "remitente")
                        .WithMany()
                        .HasForeignKey("remitenteClientId");
                });

            modelBuilder.Entity("AgenciappHome.Models.SettingMinoristaProduct", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("AgenciappHome.Models.ProductoBodega", "ProductoBodega")
                        .WithMany("SettingMinoristas")
                        .HasForeignKey("ProductoBodegaIdProducto");
                });

            modelBuilder.Entity("AgenciappHome.Models.SettingPassportExpress", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Shipping", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany("Shipping")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("RefAgency4");

                    b.HasOne("AgenciappHome.Models.Carrier", "Carrier")
                        .WithMany("Shipping")
                        .HasForeignKey("CarrierId")
                        .HasConstraintName("RefCarrier5");

                    b.HasOne("AgenciappHome.Models.Office", "Office")
                        .WithMany("Shipping")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("RefOffice16");

                    b.HasOne("AgenciappHome.Models.User", "PrincipalDistributor")
                        .WithMany()
                        .HasForeignKey("PrincipalDistributorId");

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AgenciappHome.Models.ShippingItem", b =>
                {
                    b.HasOne("AgenciappHome.Models.Package", "Package")
                        .WithMany("ShippingItem")
                        .HasForeignKey("PackageId")
                        .HasConstraintName("RefPackage14");

                    b.HasOne("AgenciappHome.Models.Shipping", "Packing")
                        .WithMany("ShippingItem")
                        .HasForeignKey("PackingId")
                        .HasConstraintName("RefShipping13");

                    b.HasOne("AgenciappHome.Models.Product", "Product")
                        .WithMany("ShippingItem")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("RefProduct15");
                });

            modelBuilder.Entity("AgenciappHome.Models.SubServicio", b =>
                {
                    b.HasOne("AgenciappHome.Models.TipoServicio", "TipoServicio")
                        .WithMany("SubServicios")
                        .HasForeignKey("TipoServicioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.Ticket", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Agency", "AgencyTransferida")
                        .WithMany()
                        .HasForeignKey("AgencyTransferidaId");

                    b.HasOne("AgenciappHome.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Agenciapp.Domain.Models.Discount", "DiscountCode")
                        .WithMany()
                        .HasForeignKey("DiscountCodeId");

                    b.HasOne("AgenciappHome.Models.OrderRevisada", "FirmaCliente")
                        .WithMany()
                        .HasForeignKey("FirmaClienteId");

                    b.HasOne("AgenciappHome.Models.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId");

                    b.HasOne("AgenciappHome.Models.Wholesaler", "Wholesaler")
                        .WithMany("Tickets")
                        .HasForeignKey("IdWholesaler");

                    b.HasOne("AgenciappHome.Models.Minorista", "Minorista")
                        .WithMany()
                        .HasForeignKey("MinoristaId");

                    b.HasOne("AgenciappHome.Models.PaqueteTuristico", "PaqueteTuristico")
                        .WithMany("Tickets")
                        .HasForeignKey("PaqueteTuristicoId");

                    b.HasOne("AgenciappHome.Models.Rentadora", "Rentadora")
                        .WithMany()
                        .HasForeignKey("RentadoraId");

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("AgenciappHome.Models.AuthorizationCard", "authorizationCard")
                        .WithMany()
                        .HasForeignKey("authorizationCardId");
                });

            modelBuilder.Entity("AgenciappHome.Models.TipoServicio", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");
                });

            modelBuilder.Entity("AgenciappHome.Models.TipoServicioMayorista", b =>
                {
                    b.HasOne("AgenciappHome.Models.Wholesaler")
                        .WithMany("tipoServicioRestoProv")
                        .HasForeignKey("WholesalerIdWholesaler");

                    b.HasOne("AgenciappHome.Models.Wholesaler")
                        .WithMany("tipoServicioHabana")
                        .HasForeignKey("WholesalerIdWholesaler1");
                });

            modelBuilder.Entity("AgenciappHome.Models.UserAgencyTransferred", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.User")
                        .WithMany("UserAgencyTransferreds")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("AgenciappHome.Models.UserWholesaler", b =>
                {
                    b.HasOne("AgenciappHome.Models.User", "User")
                        .WithMany("UserWholesalers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Wholesaler", "Wholesaler")
                        .WithMany("UserWholesalers")
                        .HasForeignKey("WholesalerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.ValorAduanalItem", b =>
                {
                    b.HasOne("AgenciappHome.Models.OrderCubiq")
                        .WithMany("ValorAduanalItem")
                        .HasForeignKey("OrderCubiqId");

                    b.HasOne("AgenciappHome.Models.Order", "Order")
                        .WithMany("ValorAduanalItem")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Table_Order");

                    b.HasOne("AgenciappHome.Models.ValorAduanal", "ValorAduanal")
                        .WithMany("ValorAduanalItem")
                        .HasForeignKey("ValorAduanalId")
                        .HasConstraintName("FK_Table_ValorAduanal");
                });

            modelBuilder.Entity("AgenciappHome.Models.ValorAduanalItemEnvMaritimo", b =>
                {
                    b.HasOne("AgenciappHome.Models.EnvioMaritimo", "Envio")
                        .WithMany("valorAduanalItems")
                        .HasForeignKey("EnvioId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.ValorAduanal", "ValorAduanal")
                        .WithMany()
                        .HasForeignKey("ValorAduanalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.ValoresxTramite", b =>
                {
                    b.HasOne("AgenciappHome.Models.CostosxModulo", "CostosxModulo")
                        .WithMany("valoresTramites")
                        .HasForeignKey("CostosxModuloId");
                });

            modelBuilder.Entity("AgenciappHome.Models.ValorProvincia", b =>
                {
                    b.HasOne("AgenciappHome.Models.ValoresxTramite", "listValores")
                        .WithMany("valores")
                        .HasForeignKey("listValoresValoresxTramiteId");
                });

            modelBuilder.Entity("AgenciappHome.Models.Wholesaler", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency")
                        .WithMany("Wholesalers")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryIdCategory");
                });

            modelBuilder.Entity("AgenciappHome.Models.ZelleEmailSetting", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgenciappHome.Models.ZelleItem", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgenciappHome.Models.EnvioCaribe", "EnvioCaribe")
                        .WithMany()
                        .HasForeignKey("EnvioCaribeId");

                    b.HasOne("AgenciappHome.Models.EnvioMaritimo", "EnvioMaritimo")
                        .WithMany()
                        .HasForeignKey("EnvioMaritimoId");

                    b.HasOne("AgenciappHome.Models.ApiModel.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.HasOne("AgenciappHome.Models.OrderCubiq", "OrderCubic")
                        .WithMany()
                        .HasForeignKey("OrderCubicOrderCubiqId");

                    b.HasOne("AgenciappHome.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("AgenciappHome.Models.PaqueteTuristico", "PaqueteTuristico")
                        .WithMany()
                        .HasForeignKey("PaqueteTuristicoPaqueteId");

                    b.HasOne("AgenciappHome.Models.Passport", "Passport")
                        .WithMany()
                        .HasForeignKey("PassportId");

                    b.HasOne("AgenciappHome.Models.Rechargue", "Rechargue")
                        .WithMany()
                        .HasForeignKey("RechargueId");

                    b.HasOne("AgenciappHome.Models.Remittance", "Remittance")
                        .WithMany()
                        .HasForeignKey("RemittanceId");

                    b.HasOne("AgenciappHome.Models.Ticket", "Reserva")
                        .WithMany()
                        .HasForeignKey("ReservaTicketId");

                    b.HasOne("AgenciappHome.Models.Servicio", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId");
                });

            modelBuilder.Entity("RapidMultiservice.Models.Responses.CatalogItem", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("RapidMultiservice.Models.Responses.LandingItem", "LandingItem")
                        .WithMany("CatalogItems")
                        .HasForeignKey("LandingItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RapidMultiservice.Models.Responses.LandingItem", b =>
                {
                    b.HasOne("AgenciappHome.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.AttachmentPassport", b =>
                {
                    b.HasOne("AgenciappHome.Models.Passport", "Passport")
                        .WithMany("Attachments")
                        .HasForeignKey("PassportId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.AttachmentReclamo", b =>
                {
                    b.HasOne("AgenciappHome.Models.Reclamo", "Reclamo")
                        .WithMany("Attachments")
                        .HasForeignKey("ReclamoId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.AttachmentServicio", b =>
                {
                    b.HasOne("AgenciappHome.Models.Servicio", "Servicio")
                        .WithMany("Attachments")
                        .HasForeignKey("ServicioId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ChequeHE11", b =>
                {
                    b.HasOne("AgenciappHome.Models.Passport", "Passport")
                        .WithMany()
                        .HasForeignKey("PassportId");
                });

            modelBuilder.Entity("Agenciapp.Domain.Models.ChequePrimeraVez", b =>
                {
                    b.HasOne("AgenciappHome.Models.Passport", "Passport")
                        .WithMany()
                        .HasForeignKey("PassportId");
                });

            modelBuilder.Entity("AgenciappHome.Models.DocumentAttachment", b =>
                {
                    b.HasOne("AgenciappHome.Models.Ticket")
                        .WithMany("DocumentAttachments")
                        .HasForeignKey("TicketId1");
                });

            modelBuilder.Entity("AgenciappHome.Models.ImageAttachment", b =>
                {
                    b.HasOne("AgenciappHome.Models.Ticket")
                        .WithMany("ImageAttachments")
                        .HasForeignKey("TicketId1");
                });

            modelBuilder.Entity("AgenciappHome.Models.CreditWholesaler", b =>
                {
                    b.HasOne("AgenciappHome.Models.Wholesaler", "Wholesaler")
                        .WithMany("CreditWholesalers")
                        .HasForeignKey("WholesalerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
